{"version":3,"sources":["webpack:///../src/js/aui/form-validation/validator-register.js","webpack:///../src/js/aui/form-validation.js","webpack:///../src/js/aui/form-validation/basic-validators.js","webpack:///./aui.component.form-validation.js"],"names":["__webpack_require__","logger","ATTRIBUTE_RESERVED_ARGUMENTS","validators","validatorRegister","register","trigger","validatorFunction","triggerSelector","reservedArgument","validatorArguments","some","arg","isReserved","$","inArray","getReservedArgument","warn","join","validator","validatorTrigger","push","default","deprecate","ATTRIBUTE_VALIDATION_OPTION_PREFIX","ATTRIBUTE_NOTIFICATION_PREFIX","ATTRIBUTE_FIELD_STATE","INVALID","VALID","VALIDATING","UNVALIDATED","CLASS_VALIDATION_INITIALISED","EVENT_FIELD_STATE_CHANGED","initValidation","$field","hasClass","isFieldInitialised","getDisplayField","attr","initialiseDisplayField","addClass","prepareFieldMarkup","keyUpTimer","triggerStopTypingEvent","on","clearTimeout","setTimeout","bindStopTypingEvent","validateWhen","getValidationOption","watchedFieldID","add","validationTriggeredHandler","bindValidationEvent","bindFieldEvents","changeFieldState","setFieldNotification","clearFieldMessages","validatorsToRun","callList","getValidators","forEach","index","is","getActivatedValidators","deferreds","allDeferreds","validatorIndex","deferred","Deferred","validatorDeferred","context","validate","resolve","invalidate","message","reject","args","createArgumentAccessorFunction","el","$el","prop","sinceVersion","removeInVersion","alternativeName","extraInfo","createValidatorContext","runValidatorsAndGetDeferred","fieldValidators","when","apply","done","startValidating","option","optionValue","state","Event","$displayField","stateToNotificationTypeMap","notificationType","stillValidating","getFieldState","showSpinnerIfSlow","type","spinnerWasVisible","isSpinnerVisible","removeFieldNotification","removeIconOnlyNotifications","previousMessage","newMessage","newString","previousString","newStackedMessageList","JSON","parse","concat","stringify","combineJSONMessages","removeAttr","displayFieldID","undefined","_jquery2","delaySubmitUntilStateChange","$form","event","preventDefault","one","getFieldsInFormWithState","selector","find","document","e","form","target","formState","stateNames","containsInvalidState","indexOf","containsUnvalidatedState","containsValidatingState","mergeStates","$fields","map","field","getFieldCollectionStateNames","getFormStateName","each","validateUnvalidatedFields","first","focus","selectFirstInvalid","validSubmitEvent","isDefaultPrevented","_skate2","attached","setAttribute","skate","init","ATTRIBUTE","_amdify2","_globalize2","minMaxLength","fieldValueLength","value","length","fieldIsEmpty","minlength","parseInt","maxlength","exactlengthMessage","makeMessage","minlengthMessage","maxlengthMessage","isPasswordField","getAttribute","matchesRegex","val","regex","matches","match","pattern","patternMessage","RegExp","required","requiredMessage","minOrMax","validNumberMessage","fieldValue","isNaN","minValue","maxValue","key","accessorFunction","customTokens","defaultMessage","i18n","keys","pluginI18nMessages","messageTokens","formattingArguments","customMessageUnformatted","AJS","format","thisFieldValue","matchingField","getElementById","matchingFieldValue","matchingFieldMessage","doesNotContainMessage","dateFormatSymbolic","dateFormatMessage","symbolRegexMap","Y","y","m","M","D","d","dateFormatRegexString","split","dateSymbol","isRecognisedSymbol","hasOwnProperty","dateFormatRegex","amountChecked","aboveMin","belowMax","belowMinMessage","aboveMaxMessage","getText","exactlength","matchingfield","matchingfield-novalue","doesnotcontain","validnumber","min","max","dateformat","minchecked","maxchecked"],"mappings":"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","file":"aui.chunk.65ac9ff2e18790f6c525--e4c234a7491fa4bca45a.js","sourcesContent":["import $ from '../jquery';\nimport * as logger from '../internal/log';\nimport amdify from '../internal/amdify';\n\nvar ATTRIBUTE_RESERVED_ARGUMENTS = ['displayfield', 'watchfield', 'when', 'novalidate', 'state'];\nvar validators = [];\n\nfunction getReservedArgument (validatorArguments) {\n    var reservedArgument = false;\n\n    validatorArguments.some(function (arg) {\n        var isReserved = $.inArray(arg, ATTRIBUTE_RESERVED_ARGUMENTS) !== -1;\n\n        if (isReserved) {\n            reservedArgument = arg;\n        }\n\n        return isReserved;\n    });\n\n    return reservedArgument;\n}\n\n/**\n * Register a validator that can be used to validate fields. The main entry point for validator plugins.\n * @param trigger - when to run the validator. Can be an array of arguments, or a selector\n * @param validatorFunction - the function that will be called on the field to determine validation. Receives\n *      field - the field that is being validated\n *      args - the arguments that have been specified in HTML markup.\n */\nfunction registerValidator (trigger, validatorFunction) {\n    var triggerSelector;\n\n    if (typeof trigger === 'string') {\n        triggerSelector = trigger;\n    } else {\n        var reservedArgument = getReservedArgument(trigger);\n\n        if (reservedArgument) {\n            logger.warn('Validators cannot be registered with the argument \"' + reservedArgument + '\", as it is a reserved argument.');\n            return false;\n        }\n\n        triggerSelector = '[data-aui-validation-' + trigger.join('],[data-aui-validation-') + ']';\n    }\n\n    var validator = {\n        validatorFunction: validatorFunction,\n        validatorTrigger: triggerSelector\n    };\n\n    validators.push(validator);\n\n    return validator;\n}\n\nvar validatorRegister = {\n    register: registerValidator,\n    validators: function () {\n        return validators;\n    }\n};\n\namdify('aui/form-validation/validator-register', validatorRegister);\n\nexport default validatorRegister;\n","import $ from './jquery';\nimport './form-notification';\nimport './form-validation/basic-validators';\nimport amdify from './internal/amdify';\nimport * as deprecate from './internal/deprecation';\nimport globalize from './internal/globalize';\nimport skate from './internal/skate';\nimport validatorRegister from './form-validation/validator-register';\n\n//Attributes\nvar ATTRIBUTE_VALIDATION_OPTION_PREFIX = 'aui-validation-';\nvar ATTRIBUTE_NOTIFICATION_PREFIX = 'data-aui-notification-';\n\nvar ATTRIBUTE_FIELD_STATE = 'aui-validation-state';\nvar INVALID = 'invalid';\nvar VALID = 'valid';\nvar VALIDATING = 'validating';\nvar UNVALIDATED = 'unvalidated';\n\nvar ATTRIBUTE_VALIDATION_FIELD_COMPONENT = 'data-aui-validation-field';\n\n//Classes\nvar CLASS_VALIDATION_INITIALISED = '_aui-form-validation-initialised';\n\n//Events\nvar EVENT_FIELD_STATE_CHANGED = '_aui-internal-field-state-changed';\n\nfunction isFieldInitialised($field) {\n    return $field.hasClass(CLASS_VALIDATION_INITIALISED);\n}\n\nfunction initValidation($field) {\n    if (!isFieldInitialised($field)) {\n        initialiseDisplayField($field);\n        prepareFieldMarkup($field);\n        bindFieldEvents($field);\n        changeFieldState($field, UNVALIDATED);\n    }\n}\n\nfunction initialiseDisplayField($field) {\n    getDisplayField($field).attr('data-aui-notification-field', '');\n}\n\nfunction prepareFieldMarkup($field){\n    $field.addClass(CLASS_VALIDATION_INITIALISED);\n}\n\nfunction bindFieldEvents($field) {\n    bindStopTypingEvent($field);\n    bindValidationEvent($field);\n}\n\nfunction bindStopTypingEvent($field){\n    var keyUpTimer;\n\n    var triggerStopTypingEvent = function () {\n        $field.trigger('aui-stop-typing');\n    };\n\n    $field.on('keyup', function () {\n        clearTimeout(keyUpTimer);\n        keyUpTimer = setTimeout(triggerStopTypingEvent, 1500);\n    });\n}\n\nfunction bindValidationEvent($field) {\n    var validateWhen = getValidationOption($field, 'when');\n    var watchedFieldID = getValidationOption($field, 'watchfield');\n\n    var elementsToWatch = watchedFieldID ? $field.add('#' + watchedFieldID) : $field;\n\n    elementsToWatch.on(validateWhen, function startValidation () {\n        validationTriggeredHandler($field);\n    });\n}\n\nfunction validationTriggeredHandler($field) {\n    var noValidate = getValidationOption($field, 'novalidate');\n\n    if (noValidate) {\n        changeFieldState($field, VALID);\n        return;\n    }\n\n    return startValidating($field);\n}\n\nfunction getValidationOption($field, option) {\n    var defaults = {\n        'when': 'change'\n    };\n    var optionValue = $field.attr('data-' + ATTRIBUTE_VALIDATION_OPTION_PREFIX + option);\n    if (!optionValue) {\n        optionValue = defaults[option];\n    }\n\n    return optionValue;\n}\n\nfunction startValidating($field) {\n    clearFieldMessages($field);\n\n    var validatorsToRun = getActivatedValidators($field);\n\n    changeFieldState($field, VALIDATING);\n\n    var deferreds = runValidatorsAndGetDeferred($field, validatorsToRun);\n    var fieldValidators = $.when.apply($, deferreds);\n    fieldValidators.done(function () {\n        changeFieldState($field, VALID);\n    });\n\n    return fieldValidators;\n}\n\nfunction clearFieldMessages($field) {\n    setFieldNotification(getDisplayField($field), 'none');\n}\n\nfunction getValidators() {\n    return validatorRegister.validators();\n}\n\nfunction getActivatedValidators($field) {\n    var callList = [];\n    getValidators().forEach(function (validator, index) {\n        var validatorTrigger = validator.validatorTrigger;\n        var runThisValidator = $field.is(validatorTrigger);\n        if (runThisValidator) {\n            callList.push(index);\n        }\n    });\n\n    return callList;\n}\n\nfunction runValidatorsAndGetDeferred($field, validatorsToRun) {\n    var allDeferreds = [];\n\n    validatorsToRun.forEach(function (validatorIndex) {\n        var validatorFunction = getValidators()[validatorIndex].validatorFunction;\n        var deferred = new $.Deferred();\n        var validatorContext = createValidatorContext($field, deferred);\n        validatorFunction(validatorContext);\n\n        allDeferreds.push(deferred);\n    });\n\n    return allDeferreds;\n}\n\nfunction createValidatorContext($field, validatorDeferred) {\n    var context = {\n        validate: function () {\n            validatorDeferred.resolve();\n        },\n        invalidate: function (message) {\n            changeFieldState($field, INVALID, message);\n            validatorDeferred.reject();\n        },\n        args: createArgumentAccessorFunction($field),\n        el: $field[0],\n        $el: $field\n    };\n\n    deprecate.prop(context, '$el', {\n        sinceVersion: '5.9.0',\n        removeInVersion: '9.0.0',\n        alternativeName: 'el',\n        extraInfo: 'See https://ecosystem.atlassian.net/browse/AUI-3263.'\n    });\n\n    return context;\n}\n\nfunction createArgumentAccessorFunction($field) {\n    return function (arg) {\n        return $field.attr('data-' + ATTRIBUTE_VALIDATION_OPTION_PREFIX + arg) || $field.attr(arg);\n    };\n}\n\nfunction changeFieldState($field, state, message) {\n    $field.attr('data-' + ATTRIBUTE_FIELD_STATE, state);\n\n    if (state === UNVALIDATED) {\n        return;\n    }\n\n    $field.trigger($.Event(EVENT_FIELD_STATE_CHANGED));\n\n    var $displayField = getDisplayField($field);\n\n    var stateToNotificationTypeMap = {};\n    stateToNotificationTypeMap[VALIDATING] = 'wait';\n    stateToNotificationTypeMap[INVALID] = 'error';\n    stateToNotificationTypeMap[VALID] = 'success';\n\n    var notificationType = stateToNotificationTypeMap[state];\n\n    if (state === VALIDATING) {\n        showSpinnerIfSlow($field);\n    } else {\n        setFieldNotification($displayField, notificationType, message);\n    }\n\n}\n\nfunction showSpinnerIfSlow($field) {\n    setTimeout(function () {\n        var stillValidating = getFieldState($field) === VALIDATING;\n        if (stillValidating) {\n            setFieldNotification($field, 'wait');\n        }\n    }, 500);\n}\n\nfunction setFieldNotification($field, type, message) {\n    var spinnerWasVisible = isSpinnerVisible($field);\n    removeIconOnlyNotifications($field);\n    var skipShowingSuccessNotification = (type === 'success') && !spinnerWasVisible;\n    if (skipShowingSuccessNotification) {\n        return;\n    }\n\n    if (type === 'none') {\n        removeFieldNotification($field, 'error');\n    } else {\n        var previousMessage = $field.attr(ATTRIBUTE_NOTIFICATION_PREFIX + type) || '[]';\n        var newMessage = message ? combineJSONMessages(message, previousMessage) : '';\n        $field.attr(ATTRIBUTE_NOTIFICATION_PREFIX + type, newMessage);\n    }\n}\n\nfunction removeIconOnlyNotifications($field) {\n    removeFieldNotification($field, 'wait');\n    removeFieldNotification($field, 'success');\n}\n\nfunction removeFieldNotification($field, type) {\n    $field.removeAttr(ATTRIBUTE_NOTIFICATION_PREFIX + type);\n}\n\nfunction isSpinnerVisible($field) {\n    return $field.is('[' + ATTRIBUTE_NOTIFICATION_PREFIX + 'wait]');\n}\n\nfunction combineJSONMessages(newString, previousString) {\n    var previousStackedMessageList = JSON.parse(previousString);\n    var newStackedMessageList = previousStackedMessageList.concat([newString]);\n    var newStackedMessage = JSON.stringify(newStackedMessageList);\n    return newStackedMessage;\n}\n\nfunction getDisplayField($field) {\n    var displayFieldID = getValidationOption($field, 'displayfield');\n    var notifyOnSelf = (displayFieldID === undefined);\n    return notifyOnSelf ? $field : $('#' + displayFieldID);\n}\n\nfunction getFieldState($field) {\n    return $field.attr('data-' + ATTRIBUTE_FIELD_STATE);\n}\n\n/**\n * Trigger validation on a field manually\n * @param $field the field that validation should be triggered for\n */\nfunction validateField($field) {\n    $field = $($field);\n    validationTriggeredHandler($field);\n}\n\n/**\n * Form scrolling and submission prevent based on validation state\n * -If the form is unvalidated, validate all fields\n * -If the form is invalid, go to the first invalid element\n * -If the form is validating, wait for them to validate and then try submitting again\n * -If the form is valid, allow form submission\n */\n$(document).on('submit', function (e) {\n    var form = e.target;\n    var $form = $(form);\n\n    var formState = getFormStateName($form);\n    if (formState === UNVALIDATED) {\n        delaySubmitUntilStateChange($form, e);\n        validateUnvalidatedFields($form);\n    } else if (formState === VALIDATING) {\n        delaySubmitUntilStateChange($form, e);\n    } else if (formState === INVALID) {\n        e.preventDefault();\n        selectFirstInvalid($form);\n    } else if (formState === VALID) {\n        var validSubmitEvent = $.Event('aui-valid-submit');\n        $form.trigger(validSubmitEvent);\n        var preventNormalSubmit = validSubmitEvent.isDefaultPrevented();\n        if (preventNormalSubmit) {\n            e.preventDefault(); //users can bind to aui-valid-submit for ajax forms\n        }\n    }\n});\n\nfunction delaySubmitUntilStateChange($form, event) {\n    event.preventDefault();\n    $form.one(EVENT_FIELD_STATE_CHANGED, function () {\n        $form.trigger('submit');\n    });\n}\n\nfunction getFormStateName($form) {\n    var $fieldCollection = $form.find('.' + CLASS_VALIDATION_INITIALISED);\n    var fieldStates = getFieldCollectionStateNames($fieldCollection);\n    var wholeFormState = mergeStates(fieldStates);\n    return wholeFormState;\n}\n\nfunction getFieldCollectionStateNames($fields) {\n    var states = $.map($fields, function (field) {\n        return getFieldState($(field));\n    });\n    return states;\n}\n\nfunction mergeStates(stateNames) {\n    var containsInvalidState = stateNames.indexOf(INVALID) !== -1;\n    var containsUnvalidatedState = stateNames.indexOf(UNVALIDATED) !== -1;\n    var containsValidatingState = stateNames.indexOf(VALIDATING) !== -1;\n\n    if (containsInvalidState) {\n        return INVALID;\n    } else if (containsUnvalidatedState) {\n        return UNVALIDATED;\n    } else if (containsValidatingState) {\n        return VALIDATING;\n    } else {\n        return VALID;\n    }\n}\n\nfunction validateUnvalidatedFields($form) {\n    var $unvalidatedElements = getFieldsInFormWithState($form, UNVALIDATED);\n    $unvalidatedElements.each(function (index, el) {\n        validator.validate($(el));\n    });\n}\n\nfunction selectFirstInvalid($form) {\n    var $firstInvalidField = getFieldsInFormWithState($form, INVALID).first();\n    $firstInvalidField.focus();\n}\n\nfunction getFieldsInFormWithState($form, state) {\n    var selector = '[data-' + ATTRIBUTE_FIELD_STATE + '=' + state + ']';\n    return $form.find(selector);\n}\n\n\nvar validator = {\n    register: validatorRegister.register,\n    validate: validateField\n};\n\nskate(ATTRIBUTE_VALIDATION_FIELD_COMPONENT, {\n    attached: function (field) {\n        if (field.form) {\n            field.form.setAttribute('novalidate', 'novalidate');\n        }\n        var $field = $(field);\n        initValidation($field);\n        skate.init(field); //needed to kick off form notification skate initialisation\n    },\n    type: skate.type.ATTRIBUTE\n});\n\namdify('aui/form-validation', validator);\nglobalize('formValidation', validator);\nexport default validator;\n","import $ from '../jquery';\nimport amdify from '../internal/amdify';\nimport format from '../format'; // eslint-disable-line no-unused-vars\nimport i18n from '../i18n'; // eslint-disable-line no-unused-vars\nimport validatorRegister from './validator-register';\n\n//Input length\nfunction minMaxLength(field) {\n    var fieldValueLength = field.el.value.length;\n    let fieldIsEmpty = fieldValueLength === 0;\n    var minlength = parseInt(field.args('minlength'), 10);\n    var maxlength = parseInt(field.args('maxlength'), 10);\n\n    if (minlength && maxlength && minlength === maxlength && (!fieldIsEmpty && fieldValueLength !== minlength)) {\n        const exactlengthMessage = makeMessage('exactlength', field.args, [minlength]);\n        field.invalidate(exactlengthMessage);\n    } else if (minlength && (fieldValueLength < minlength && !fieldIsEmpty)) {\n        const minlengthMessage = makeMessage('minlength', field.args);\n        field.invalidate(minlengthMessage);\n    } else if (maxlength && (fieldValueLength > maxlength)) {\n        const maxlengthMessage = makeMessage('maxlength', field.args);\n        field.invalidate(maxlengthMessage);\n    } else {\n        field.validate();\n    }\n}\nvalidatorRegister.register(['maxlength', 'minlength'], minMaxLength); //AUI-prefixed attribute is deprecated as of 5.9.0\nvalidatorRegister.register('[maxlength],[minlength]', minMaxLength);\n\n//Field matching\nvalidatorRegister.register(['matchingfield'], function (field) {\n    var thisFieldValue = field.el.value;\n    var matchingField = document.getElementById(field.args('matchingfield'));\n    var matchingFieldValue = matchingField.value;\n\n    var matchingFieldMessage = makeMessage('matchingfield', field.args, [thisFieldValue, matchingFieldValue]);\n\n    var shouldHidePasswords = isPasswordField(field.el) || isPasswordField(matchingField);\n    if (shouldHidePasswords) {\n        matchingFieldMessage = makeMessage('matchingfield-novalue', field.args);\n    }\n\n    if (!thisFieldValue || !matchingFieldValue){\n        field.validate();\n    } else if (matchingFieldValue !== thisFieldValue) {\n        field.invalidate(matchingFieldMessage);\n    } else {\n        field.validate();\n    }\n});\n\nfunction isPasswordField(field) {\n    return field.getAttribute('type') === 'password';\n}\n\n//Banned words\nvalidatorRegister.register(['doesnotcontain'], function (field) {\n    var doesNotContainMessage = makeMessage('doesnotcontain', field.args);\n\n    if (field.el.value.indexOf(field.args('doesnotcontain')) === -1) {\n        field.validate();\n    } else {\n        field.invalidate(doesNotContainMessage);\n    }\n});\n\n//Matches regex\n\nfunction matchesRegex(val, regex){\n    var matches = val.match(regex);\n    if (!matches) {\n        return false;\n    }\n    var isExactMatch = (val === matches[0]);\n    return isExactMatch;\n}\n\nfunction pattern(field) {\n    var patternMessage = makeMessage('pattern', field.args);\n\n    if (matchesRegex(field.el.value, new RegExp(field.args('pattern')))) {\n        field.validate();\n    } else {\n        field.invalidate(patternMessage);\n    }\n}\n\nvalidatorRegister.register(['pattern'], pattern); //AUI-prefixed attribute is deprecated as of 5.9.0\nvalidatorRegister.register('[pattern]', pattern);\n\n//Native Required\nfunction required(field) {\n    var requiredMessage = makeMessage('required', field.args);\n    if (field.el.value) {\n        field.validate();\n    } else {\n        field.invalidate(requiredMessage);\n    }\n}\nvalidatorRegister.register(['required'], required); //AUI-prefixed attribute is deprecated as of 5.9.0\nvalidatorRegister.register('[required]', required);\n\n//Field value range (between min and max)\n\nfunction minOrMax(field) {\n    var validNumberMessage = makeMessage('validnumber', field.args);\n\n    var fieldValue = parseInt(field.el.value, 10);\n    if (isNaN(fieldValue)) {\n        field.invalidate(validNumberMessage);\n        return;\n    }\n\n    var minValue = field.args('min');\n    var maxValue = field.args('max');\n\n    if (minValue && (fieldValue < parseInt(minValue, 10))) {\n        field.invalidate(makeMessage('min', field.args));\n    } else if (maxValue && (fieldValue > parseInt(maxValue, 10))){\n        field.invalidate(makeMessage('max', field.args));\n    } else {\n        field.validate();\n    }\n}\nvalidatorRegister.register(['min', 'max'], minOrMax); //AUI-prefixed attribute is deprecated as of 5.9.0\nvalidatorRegister.register('[min],[max]', minOrMax);\n\n//Date format\nvalidatorRegister.register(['dateformat'], function (field) {\n    var dateFormatSymbolic = field.args('dateformat');\n    var dateFormatMessage = makeMessage('dateformat', field.args);\n\n    var symbolRegexMap = {\n        'Y': '[0-9]{4}',\n        'y': '[0-9]{2}',\n        'm': '(0?[1-9]|10|11|12)',\n        'M': '[Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec]',\n        'D': '[Mon|Tue|Wed|Thu|Fri|Sat|Sun]',\n        'd': '([0-2]?[1-9]|10|20|30|31)'\n    };\n\n    var dateFormatSymbolArray = dateFormatSymbolic.split('');\n    var dateFormatRegexString = '';\n\n    dateFormatSymbolArray.forEach(function (dateSymbol) {\n        var isRecognisedSymbol = symbolRegexMap.hasOwnProperty(dateSymbol);\n        if (isRecognisedSymbol) {\n            dateFormatRegexString += symbolRegexMap[dateSymbol];\n        } else {\n            dateFormatRegexString += dateSymbol;\n        }\n    });\n\n    var dateFormatRegex = new RegExp(dateFormatRegexString + '$', 'i');\n    var isValidDate = matchesRegex(field.el.value, dateFormatRegex);\n\n    if (isValidDate) {\n        field.validate();\n    } else {\n        field.invalidate(dateFormatMessage);\n    }\n});\n\n//Checkbox count\nvalidatorRegister.register(['minchecked', 'maxchecked'], function (field) {\n    var amountChecked = $(field.el).find(':checked').length;\n    var aboveMin = !field.args('minchecked') || (amountChecked >= field.args('minchecked'));\n    var belowMax = !field.args('maxchecked') || (amountChecked <= field.args('maxchecked'));\n\n    var belowMinMessage = makeMessage('minchecked', field.args);\n    var aboveMaxMessage = makeMessage('maxchecked', field.args);\n\n    if (aboveMin && belowMax) {\n        field.validate();\n    } else if (!aboveMin) {\n        field.invalidate(belowMinMessage);\n    } else if (!belowMax) {\n        field.invalidate(aboveMaxMessage);\n    }\n});\n\n/*\n     Retrieves a message for a plugin validator through the data attributes or the default (which is in the i18n file)\n */\nfunction makeMessage(key, accessorFunction, customTokens) {\n    var inFlatpackMode = i18n.keys !== undefined;\n    var defaultMessage;\n    if (inFlatpackMode) {\n        defaultMessage = i18n.keys['aui.validation.message.' + key];\n    } else {\n        defaultMessage = pluginI18nMessages[key];\n    }\n\n    var messageTokens = customTokens;\n    if (!customTokens) {\n        messageTokens = [accessorFunction(key)];\n    }\n\n    var customMessageUnformatted = accessorFunction(key + '-msg');\n    var formattingArguments;\n\n    if (customMessageUnformatted) {\n        formattingArguments = [customMessageUnformatted].concat(messageTokens);\n    } else {\n        formattingArguments = [defaultMessage].concat(messageTokens);\n    }\n\n    return AJS.format.apply(null, formattingArguments);\n}\n\n/*\n The value i18n.getText('aui.validation.message...') (defaultMessage) cannot be refactored as it\n must appear verbatim for the plugin I18n transformation to pick it up\n */\nvar pluginI18nMessages = {\n    minlength: i18n.getText('aui.validation.message.minlength'),\n    maxlength: i18n.getText('aui.validation.message.maxlength'),\n    exactlength: i18n.getText('aui.validation.message.exactlength'),\n    matchingfield: i18n.getText('aui.validation.message.matchingfield'),\n    'matchingfield-novalue': i18n.getText('aui.validation.message.matchingfield-novalue'),\n    doesnotcontain: i18n.getText('aui.validation.message.doesnotcontain'),\n    pattern: i18n.getText('aui.validation.message.pattern'),\n    required: i18n.getText('aui.validation.message.required'),\n    validnumber: i18n.getText('aui.validation.message.validnumber'),\n    min: i18n.getText('aui.validation.message.min'),\n    max: i18n.getText('aui.validation.message.max'),\n    dateformat: i18n.getText('aui.validation.message.dateformat'),\n    minchecked: i18n.getText('aui.validation.message.minchecked'),\n    maxchecked: i18n.getText('aui.validation.message.maxchecked')\n};\n\namdify('aui/form-validation/basic-validators');\n","import './aui.component.form-notification';\nimport '@atlassian/aui/src/js/aui/form-validation.js';\nexport {};\n"],"sourceRoot":""}