{"version":3,"sources":["webpack:///../src/js/aui/tooltip.js"],"names":["__webpack_require__","AUI_TOOLTIP_CLASS_NAME","$","fn","tooltip","options","allOptions","extend","defaults","className","init","$this","_jquery2","default","this","$self","stringOption","tipsy","handleStringOption","triggerIsHover","trigger","hideOnClick","onClick","live","on","bindTooltip","_len","arguments","length","args","Array","_key","apply","undefined","call","each","opacity","offset","delayIn","hoverable","aria","findAllTooltips","document","getElementsByClassName","maybeTooltip","el","data","getTipsyObject","$tip"],"mappings":"0MAAA,wDAAAA,EAAA,SACAA,EAAA,QAEA,IAAMC,EAAyB,cAkD/BC,UAAEC,GAAGC,QAAU,SAAUC,GACrB,IAAMC,EAAaJ,UAAEK,UAAWL,UAAEC,GAAGC,QAAQI,SAA6B,iBAAZH,KAA4BA,GAGlFI,EAAcH,EAAdG,UASR,SAASC,IACL,IAAMC,GAAQ,EAAAC,EAAAC,SAAEC,MAMhB,MALuB,iBAAZT,EA/DnB,SAA6BU,EAAOC,GAEhCD,EAAME,MAAMD,GA8DJE,CAAmBP,EAAON,GA1DtC,SAAsBU,EAAOV,GACzBU,EAAME,MAAMZ,GAEZ,IAAMc,EAAqC,UAApBd,EAAQe,UAAwBf,EAAQe,SAA4C,UAAjCL,EAAME,MAAMT,SAASY,QAE/F,GADoBf,GAAWA,EAAQgB,aAAeF,EACrC,CACb,IAAMG,EAAU,YACZ,EAAAV,EAAAC,SAAEC,MAAMG,MAAM,SAGdZ,EAAQkB,KACRR,EAAMS,GAAG,cAAenB,EAAQkB,KAAMD,GAEtCP,EAAMS,GAAG,cAAeF,IA+CxBG,CAAYd,EAAOL,GAEhBK,EAIX,OAlBIL,EAAWG,UADU,iBAAdA,EACmBR,EAA1B,IAAoDQ,EACxB,mBAAdA,EACS,mBAAAiB,EAAAC,UAAAC,OAAIC,EAAJC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAIF,EAAJE,GAAAJ,UAAAI,GAAA,OAAgB9B,EAAhB,IAA0CQ,EAAUuB,WAAMC,EAAWJ,IAErE5B,EAcvBK,EAAWiB,KACJb,EAAKwB,KAAKpB,MAIdA,KAAKqB,KAAKzB,IAGrBR,UAAEC,GAAGC,QAAQI,UACT4B,QAAS,EACTC,OAAQ,EACRC,QAAS,IACTC,WAAW,EACXlB,aAAa,EACbmB,MAAM,aAGKtC,YAEXuC,gBA/CJ,WACI,OAAO,EAAA7B,EAAAC,SAAE6B,SAASC,uBAAuB1C,OA+CzC2C,aAzDJ,SAAuBC,GACnB,IAAM5B,EAXV,SAAyB4B,GACrB,OAAO,EAAAjC,EAAAC,SAAEgC,GAAIC,KAAK,SAUJC,CAAeF,GAC7B,OAAI5B,EACOA,EAAM+B,MAEN,EAAApC,EAAAC","file":"aui.chunk.2e68f3885b6c7bde25f1--2a7e0ed37e8812dee42f.js","sourcesContent":["import $ from './jquery';\nimport '@atlassian/tipsy/src/javascripts/jquery.tipsy';\n\nconst AUI_TOOLTIP_CLASS_NAME = 'aui-tooltip';\n\nfunction handleStringOption ($self, stringOption) {\n    // Pass string values straight to tipsy\n    $self.tipsy(stringOption);\n    return $self;\n}\n\nfunction bindTooltip ($self, options) {\n    $self.tipsy(options);\n\n    const triggerIsHover = options.trigger === 'hover' || !options.trigger && $self.tipsy.defaults.trigger === 'hover';\n    const hideOnClick = options && options.hideOnClick && triggerIsHover;\n    if (hideOnClick) {\n        const onClick = function() {\n            $(this).tipsy('hide');\n        };\n\n        if (options.live) {\n            $self.on('click.tipsy', options.live, onClick);\n        } else {\n            $self.on('click.tipsy', onClick);\n        }\n    }\n    return $self;\n}\n\nfunction getTipsyObject (el) {\n    return $(el).data('tipsy');\n}\n\n/**\n * If a given selector has been initialised as a tooltip, returns the tooltip element.\n * Otherwise, returns an empty jQuery object so calls are still chainable yet benign.\n * @param el\n * @returns {jQuery}\n */\nfunction maybeTooltip (el) {\n    const tipsy = getTipsyObject(el);\n    if (tipsy) {\n        return tipsy.$tip;\n    } else {\n        return $();\n    }\n}\n\nfunction findAllTooltips () {\n    return $(document.getElementsByClassName(AUI_TOOLTIP_CLASS_NAME));\n}\n\n$.fn.tooltip = function (options) {\n    const allOptions = $.extend({}, $.fn.tooltip.defaults, typeof options === 'string' ? {} : options);\n\n    // Always add AUI's tooltip class name to tipsies created by AUI.\n    const { className } = allOptions;\n    if (typeof className === 'string') {\n        allOptions.className = `${AUI_TOOLTIP_CLASS_NAME} ${className}`\n    } else if (typeof className === 'function') {\n        allOptions.className = (...args) => `${AUI_TOOLTIP_CLASS_NAME} ${className.apply(undefined, args)}`;\n    } else {\n        allOptions.className = AUI_TOOLTIP_CLASS_NAME;\n    }\n\n    function init() {\n        const $this = $(this);\n        if (typeof options === 'string') {\n            handleStringOption($this, options);\n        } else {\n            bindTooltip($this, allOptions);\n        }\n        return $this;\n    }\n\n    // Handle live option\n    if (allOptions.live) {\n        return init.call(this);\n    }\n\n    // If not live, bind each object in the collection\n    return this.each(init);\n};\n\n$.fn.tooltip.defaults = {\n    opacity: 1.0,\n    offset: 1,\n    delayIn: 500,\n    hoverable: true,\n    hideOnClick: true,\n    aria: true\n};\n\nexport default $;\nexport {\n    findAllTooltips,\n    maybeTooltip\n};\n"],"sourceRoot":""}