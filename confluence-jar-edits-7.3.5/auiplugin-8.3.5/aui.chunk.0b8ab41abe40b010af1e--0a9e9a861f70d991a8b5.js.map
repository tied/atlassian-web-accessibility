{"version":3,"sources":["webpack:///../src/js/aui/progress-indicator.js","webpack:///./aui.component.progressbar.js"],"names":["__webpack_require__","_underscore","_animation","deprecate","afterTransitionEvent","beforeTransitionEvent","transitionEnd","transitionProgress","progressBar","progressBarContainer","_ref","currentProgress","value","$progressBar","_jquery2","default","$progressBarContainer","trigger","one","progressValue","recomputeStyle","css","attr","updateProgress","setIndeterminateOnProgressElement","element","first","children","removeAttr","DEFAULTS","indeterminate","max","val","validNumeric","isNumber","isFinite","isNaN","parseNumeric","defaultVal","arguments","length","undefined","num","parseFloat","Number","parseDecimal","precision","toFixed","calc","data","parsedMax","safeMax","parsedVal","Math","min","safeValue","valAsFraction","valAsPercent","refresh","el","_calc","_data","bar","querySelector","oldVal","getAttribute","removeAttribute","setAttribute","setValue","newValue","oldValue","setMax","ProgressBarEl","_skate2","template","hasAttribute","_calc2","legacyValue","innerHTML","attached","attributes","created","removed","fallback","_updating","prototype","this","__data","defaults","d","progressBars","update","fn","document","getElementById","valueAttribute","isIndeterminate","isProgressNotChanged","get","style","width","sinceVersion","removeInVersion","extraInfo","setIndeterminate","_globalize2"],"mappings":"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","file":"aui.chunk.0b8ab41abe40b010af1e--0a9e9a861f70d991a8b5.js","sourcesContent":["import $ from './jquery';\nimport { defaults, isNumber, isFinite, isNaN } from 'underscore';\nimport skate from './internal/skate';\nimport { recomputeStyle } from './internal/animation';\nimport * as deprecate from './internal/deprecation';\nimport globalize from './internal/globalize';\n\nconst afterTransitionEvent = 'aui-progress-indicator-after-update';\nconst beforeTransitionEvent = 'aui-progress-indicator-before-update';\nconst transitionEnd = 'transitionend webkitTransitionEnd';\n\n\nfunction updateProgress($progressBar, $progressBarContainer, progressValue) {\n    recomputeStyle($progressBar);\n    $progressBar.css('width', progressValue * 100 + '%');\n    $progressBarContainer.attr('data-value', progressValue);\n}\n\n\nfunction updateProgressElement(element, value) {\n    if (typeof element === 'string') {\n        let el = document.getElementById(element);\n        if (el) {\n            element = el;\n        }\n    }\n    var $progressBarContainer = $(element).first();\n    var $progressBar = $progressBarContainer.children('.aui-progress-indicator-value');\n    var valueAttribute = $progressBarContainer.attr('data-value');\n    var isIndeterminate = !valueAttribute;\n    var currentProgress = parseFloat(valueAttribute) || 0;\n    var isProgressNotChanged = valueAttribute && currentProgress === value;\n\n    // AUI-4771 - check for mis-configured legacy progress bar HTML.\n    if (isProgressNotChanged) {\n        const currentDemonstratedValue = parseFloat($progressBar.get(0).style.width) || 0;\n        isProgressNotChanged = currentProgress === (currentDemonstratedValue * 100);\n    }\n\n    if (isProgressNotChanged) {\n        return;\n    }\n\n    //if the progress bar is indeterminate switch it.\n    if (isIndeterminate) {\n        $progressBar.css('width', 0);\n    }\n\n    transitionProgress($progressBar, $progressBarContainer, { currentProgress, value });\n\n    return $progressBarContainer;\n}\n\nfunction transitionProgress(progressBar, progressBarContainer, { currentProgress, value }) {\n    const $progressBar = $(progressBar);\n    const $progressBarContainer = $(progressBarContainer);\n\n    if (typeof value === 'number' && value <= 1 && value >= 0) {\n        $progressBarContainer.trigger(beforeTransitionEvent, [currentProgress, value]);\n\n        //trigger the event after transition end if supported, otherwise just trigger it\n        $progressBar.one(transitionEnd, function () {\n            $progressBarContainer.trigger(afterTransitionEvent, [currentProgress, value]);\n        });\n        updateProgress($progressBar, $progressBarContainer, value);\n    }\n}\n\nfunction setIndeterminateOnProgressElement(element) {\n    var $progressBarContainer = $(element).first();\n    var $progressBar = $progressBarContainer.children('.aui-progress-indicator-value');\n\n    $progressBarContainer.removeAttr('data-value');\n    recomputeStyle($progressBarContainer);\n    $progressBar.css('width', '');\n}\n\nconst DEFAULTS = {\n    indeterminate: false,\n    max: 1,\n    val: 0,\n};\n\nfunction validNumeric(val) {\n    return isNumber(val) && isFinite(val) && !isNaN(val);\n}\n\nfunction parseNumeric(val, defaultVal = 1) {\n    const num = parseFloat(val);\n    return validNumeric(num) ? num : Number(defaultVal);\n}\n\nfunction parseDecimal(num, precision = 1) {\n    return Number(parseFloat(num).toFixed(precision));\n}\n\nfunction safeValue(val, max) {\n    return Math.max(0, Math.min(val, max));\n}\n\nfunction safeMax(max) {\n    return max > 0 ? max : DEFAULTS.max;\n}\n\n/**\n * @param data the state\n * @returns {{max: number, val: number, valAsFraction: number, valAsPercent: number}}\n */\nfunction calc(data) {\n    const { val, max } = data;\n    const parsedMax = safeMax(max);\n    const parsedVal = safeValue(val, parsedMax);\n    const valAsFraction = parseDecimal(parsedVal / parsedMax, 6);\n    const valAsPercent = parseDecimal(valAsFraction * 100, 2);\n    return {max: parsedMax, val: parsedVal, valAsFraction, valAsPercent};\n}\n\nfunction refresh(el) {\n    const {val, valAsFraction, max} = calc(el._data);\n    const bar = el.querySelector('.aui-progress-indicator');\n    const oldVal = bar.getAttribute('data-value');\n\n    if (el.indeterminate) {\n        bar.removeAttribute('aria-valuenow');\n        setIndeterminateOnProgressElement(bar);\n    } else {\n        bar.setAttribute('aria-valuenow', val);\n        bar.setAttribute('aria-valuemax', max);\n        transitionProgress(bar.querySelector('.aui-progress-indicator-value'), bar, {\n            currentProgress: oldVal,\n            value: valAsFraction\n        });\n    }\n}\n\nfunction setValue(el, data) {\n    el._data.val = parseNumeric(data.newValue, data.oldValue || DEFAULTS.val);\n    refresh(el);\n}\n\nfunction setMax(el, data) {\n    el._data.max = parseNumeric(data.newValue, data.oldValue || DEFAULTS.max);\n    refresh(el);\n}\n\nconst ProgressBarEl = skate('aui-progressbar', {\n    template(el) {\n        // Ensure max is set before value upon element creation and before rendering.\n        // Why is this happening in 'template' and not 'created'? Because it gets called before 'created'!\n        el._data.max = parseNumeric(el.getAttribute('max'), DEFAULTS.max);\n        el._data.val = parseNumeric(el.getAttribute('value'), DEFAULTS.val);\n        el._data.indeterminate = el.hasAttribute('indeterminate');\n        const {val, max, valAsFraction, valAsPercent} = calc(el._data);\n\n        const legacyValue = el._data.indeterminate ? '' : `data-value=\"${valAsFraction}\"`;\n\n        el.innerHTML = `<div class=\"aui-progress-indicator\"\n         ${legacyValue}\n         role=\"progressbar\"\n         aria-valuemin=\"0\"\n         aria-valuenow=\"${val}\"\n         aria-valuemax=\"${max}\"\n         tabindex=\"0\"\n     >\n        <span class=\"aui-progress-indicator-value\" style=\"width: ${valAsPercent}%\"></span>\n    </div>`;\n    },\n\n    attached(el) {\n        refresh(el);\n    },\n\n    attributes: {\n        indeterminate: {\n            created: function(el) {\n                el.indeterminate = true;\n            },\n            removed: function(el) {\n                el.indeterminate = false;\n            }\n        },\n        value: {\n            value: DEFAULTS.val,\n            fallback: function (el, data) {\n                if (el._updating) {return false;}\n                setValue(el, data);\n            }\n        },\n        max: {\n            value: DEFAULTS.max,\n            fallback: function (el, data) {\n                if (el._updating) {return false;}\n                setMax(el, data);\n            }\n        },\n    },\n\n    prototype: {\n        get _data() {\n            return this.__data || (this._data = defaults({}, DEFAULTS));\n        },\n        set _data(d) {\n            return this.__data = d;\n        },\n        get indeterminate() {\n            return this._data.indeterminate;\n        },\n        set indeterminate(val) {\n            this._data.indeterminate = !!val;\n            refresh(this);\n        },\n        get value() {\n            const { val } = calc(this._data);\n            return val;\n        },\n        set value(num) {\n            if (!validNumeric(num)) {return false;}\n            const data = { newValue: parseDecimal(num, 6) };\n            this._updating = true;\n            // Reflect whatever value is set in the attributes.\n            this.setAttribute('value', data.newValue);\n            this._updating = false;\n            setValue(this, data);\n        },\n        get max() {\n            const { max } = calc(this._data);\n            return max;\n        },\n        set max(num) {\n            if (!validNumeric(num)) {return false;}\n            const data = { newValue: parseDecimal(num, 6) };\n            this._updating = true;\n            // Reflect whatever value is set in the attributes.\n            this.setAttribute('max', data.newValue);\n            this._updating = false;\n            setMax(this, data);\n        },\n    }\n});\n\nconst progressBars = {\n    update: deprecate.fn(updateProgressElement, 'AJS.progressBars.update', {\n        sinceVersion: '7.7.0',\n        removeInVersion: '9.0.0',\n        extraInfo: 'Use the <aui-progressbar> web component instead'\n    }),\n    setIndeterminate: deprecate.fn(setIndeterminateOnProgressElement, 'AJS.progressBars.setIndeterminate', {\n        sinceVersion: '7.7.0',\n        removeInVersion: '9.0.0',\n        extraInfo: 'Use the <aui-progressbar> web component instead'\n    })\n};\n\nglobalize('progressBars', progressBars);\n\nexport default progressBars;\nexport {\n    ProgressBarEl\n};\n","import './styles/aui.page.reset';\nimport './styles/aui.page.typography';\nimport '@atlassian/aui/src/less/aui-experimental-progress-indicator.less';\nexport { default as progressBars, ProgressBarEl } from '@atlassian/aui/src/js/aui/progress-indicator';\n"],"sourceRoot":""}