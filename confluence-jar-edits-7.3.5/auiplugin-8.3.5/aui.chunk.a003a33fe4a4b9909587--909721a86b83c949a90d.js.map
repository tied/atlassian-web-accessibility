{"version":3,"sources":["webpack:////buildeng/bamboo-agent-home/xml-data/build-dir/AUI-RELNEXT19-JOB1/aui/node_modules/@atlassian/aui-template/src/template.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","self","undefined","tokenRegex","objNotationRegex","replacer","all","key","obj","isHTML","res","replace","name","quote","quotedName","isFunc","String","T","escape","fillHtml","this","template","fill","toString","s","valueOf","cache","count","load","title","hasOwnProperty","length","shift","push","script","document","querySelector","findScriptByTitle","text","special","<",">","&","\"","'","`","expr","RegExp","Object","keys","join","str","factory","call","exports","__webpack_require__","module"],"mappings":"6GAAA,IAAAA,EAgBC,oBAAAC,gBAVQC,KAFDF,EAAA,WACR,OAWC,WAED,IAAAG,EAAA,gBACAC,EAAA,2DAIAC,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAF,EA2BA,OA1BAD,EAAAI,QAAAP,EAAA,SAAAE,EAAAM,EAAAC,EAAAC,EAAAC,GACAH,KAAAE,EACAJ,IACAE,EAAA,UAAAF,GACAA,IAAAE,EAAA,SACAH,GAAA,GACiBG,KAAAF,IACjBA,IAAAE,IAEAG,GAAA,mBAAAL,IACAA,UAMA,MAAAA,OAAAF,IACAE,EAAAJ,GAGAI,EAAAM,OAAAN,GAEAD,IACAC,EAAAO,EAAAC,OAAAR,IAGAA,GAQAS,EAAA,SAAAX,GAIA,OAHAY,KAAAC,SAAAD,KAAAC,SAAAV,QAAAR,EAAA,SAAAG,EAAAC,GACA,OAAAF,EAAAC,EAAAC,EAAAC,GAAA,KAEAY,MAQAE,EAAA,SAAAd,GAIA,OAHAY,KAAAC,SAAAD,KAAAC,SAAAV,QAAAR,EAAA,SAAAG,EAAAC,GACA,OAAAF,EAAAC,EAAAC,EAAAC,KAEAY,MAOAG,EAAA,WACA,OAAAH,KAAAC,UAIAJ,EAAA,SAAAO,GACA,SAAAd,IACA,OAAAA,EAAAW,SAWA,OAJAX,EAAAW,SAAAL,OAAAQ,GACAd,EAAAa,SAAAb,EAAAe,QAAAF,EACAb,EAAAY,OACAZ,EAAAS,WACAT,GAEAgB,KACAC,KAOAV,EAAAW,KAAA,SAAAC,GAEA,GADAA,EAAAb,OAAAa,IACAH,EAAAI,eAAAD,GAAA,CACAF,EAAAI,QAAA,YACAL,EAAAC,EAAAK,SAEAL,EAAAM,KAAAJ,GACA,IAAAK,EAZA,SAAAL,GACA,OAAAM,SAAAC,cAAA,iBAAAP,EAAA,MAWAQ,CAAAR,GACAK,IACAR,EAAAG,GAAAK,EAAAI,MAGA,OAAAlB,KAAAM,EAAAG,KAGA,IAAAU,GACAC,IAAA,OACAC,IAAA,OACAC,IAAA,QACAC,IAAA,SACAC,IAAA,QACAC,IAAA,SAGAC,EAAA,IAAAC,OAAA,IAAAC,OAAAC,KAAAV,GAAAW,KAAA,aAWA,OAFAjC,EAAAC,OAPA,SAAAiC,GACA,OAAAnC,OAAAmC,GAAA,IAAAxC,QAAAmC,EAAA,SAAAK,GACA,OAAAZ,EAAAY,MAOAlC,EA5IAmC,IACSC,KAAAC,EAAAC,EAAAD,EAAAE,QAAAF,QAAAtD","file":"aui.chunk.a003a33fe4a4b9909587--909721a86b83c949a90d.js","sourcesContent":["/* global self, define, module */\n;(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // we're in an AMD system\n        define(function() {\n            return factory();\n        });\n    } else {\n        if (typeof exports !== 'undefined') {\n            // we're in node\n            module.exports = factory();\n        } else {\n            // assume a global context\n            root.ajstemplate = factory();\n        }\n    }\n}(typeof self !== 'undefined' ? self : this, function() {\n\n    var tokenRegex = /\\{([^\\}]+)\\}/g; // matches \"{xxxxx}\"\n    var objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g; // matches \".xxxxx\" or \"[\"xxxxx\"]\" to run over object properties\n\n    // internal function\n    // parses \"{xxxxx}\" and returns actual value from the given object that matches the expression\n    var replacer = function (all, key, obj, isHTML) {\n        var res = obj;\n        key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n            name = name || quotedName;\n            if (res) {\n                if (name + ':html' in res) {\n                    res = res[name + ':html'];\n                    isHTML = true;\n                } else if (name in res) {\n                    res = res[name];\n                }\n                if (isFunc && typeof res === 'function') {\n                    res = res();\n                }\n            }\n        });\n\n        // if not found restore original value\n        if (res == null || res === obj) {\n            res = all;\n        }\n\n        res = String(res);\n\n        if (!isHTML) {\n            res = T.escape(res);\n        }\n\n        return res;\n    };\n    /**\n     * Replaces tokens in the template with corresponding values without HTML escaping\n     * @method fillHtml\n     * @param obj {Object} to populate the template with\n     * @return {Object} the template object\n     */\n    var fillHtml = function (obj) {\n        this.template = this.template.replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj, true);\n        });\n        return this;\n    };\n    /**\n     * Replaces tokens in the template with corresponding values with HTML escaping\n     * @method fill\n     * @param obj {Object} to populate the template with\n     * @return {Object} the template object\n     */\n    var fill = function (obj) {\n        this.template = this.template.replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n        return this;\n    };\n    /**\n     * Returns the current templated string.\n     * @method toString\n     * @return {String} the current template\n     */\n    var toString = function () {\n        return this.template;\n    };\n\n    // internal function\n    var T = function (s) {\n        function res() {\n            return res.template;\n        }\n\n        /**\n         * The current templated string\n         * @property template\n         */\n        res.template = String(s);\n        res.toString = res.valueOf = toString;\n        res.fill = fill;\n        res.fillHtml = fillHtml;\n        return res;\n    };\n    var cache = {};\n    var count = [];\n\n    var findScriptByTitle = function (title) {\n        return document.querySelector('script[title=\"' + title + '\"]');\n    };\n\n    // returns template taken form the script tag with given title. Type agnostic, but better put type=\"text/x-template\"\n    T.load = function (title) {\n        title = String(title);\n        if (!cache.hasOwnProperty(title)) {\n            if (count.length >= 1e3) {\n                delete cache[count.shift()]; // enforce maximum cache size\n            }\n            count.push(title);\n            var script = findScriptByTitle(title);\n            if (script) {\n                cache[title] = script.text;\n            }\n        }\n        return this(cache[title]);\n    };\n\n    var special = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '&': '&amp;',\n        '\"': '&quot;',\n        '\\'': '&#39;',\n        '`': '&#96;',\n    };\n\n    var expr = new RegExp('[' + Object.keys(special).join('') + ']', 'g');\n\n    function escapeHtml (str) {\n        return String(str || '').replace(expr, function (str) {\n            return special[str];\n        });\n    }\n\n    // escape HTML dangerous characters\n    T.escape = escapeHtml;\n\n    return T;\n}));\n"],"sourceRoot":""}