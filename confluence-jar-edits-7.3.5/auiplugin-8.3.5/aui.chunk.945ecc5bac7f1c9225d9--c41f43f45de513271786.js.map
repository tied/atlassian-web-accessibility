{"version":3,"sources":["webpack:///./aui.component.form.checkbox-multi-select.js","webpack:///../src/js/aui/checkbox-multiselect.js"],"names":["default","__webpack_require__","templates","dropdown","items","createSection","_jquery2","$clearItemsSection","attr","type","data-aui-checkbox-multiselect-clear","class","text","i18n","getText","appendTo","$section","$itemList","$","each","idx","item","$li","styleClass","$a","label","value","addClass","icon","css","selected","append","html","furniture","name","optionsHtml","dropdownId","$select","multiple","$dropdown","id","$button","aria-owns","aria-haspopup","handleDropdownSelection","e","target","updateOption","this","hasClass","component","$toUpdate","find","filter","$this","prop","length","trigger","updateClearAll","getSelectedDescriptors","mapOptionDescriptors","$options","map","$option","val","data","title","disabled","renderDropdown","getOptions","getDescriptors","renderButton","selectedLabels","getSelectedLabels","isImplicitAll","getImplicitAllLabel","join","$btn","getSelectedOptions","descriptor","CheckboxMultiselectEl","_skate2","attached","getAttribute","_uniqueId2","innerHTML","on","bind","deselectAllOptions","tooltip","is","getButtonTitle","prototype","selectOption","unselectOption","getValue","removeClass","addOption","removeOption","remove","_amdify2"],"mappings":"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","file":"aui.chunk.945ecc5bac7f1c9225d9--c41f43f45de513271786.js","sourcesContent":["import './styles/aui.pattern.forms';\nimport '@atlassian/aui/src/less/checkbox-multiselect.less';\nexport { default as CheckboxMultiselectEl } from '@atlassian/aui/src/js/aui/checkbox-multiselect';\n","import $ from './jquery';\nimport './dropdown2';\nimport './tooltip';\nimport i18n from './i18n';\nimport amdify from './internal/amdify';\nimport skate from './internal/skate';\nimport uid from './unique-id';\n\nvar templates = {\n    dropdown: function (items) {\n        function createSection() {\n            return $('<div class=\"aui-dropdown2-section\">');\n        }\n\n        // clear items section\n        var $clearItemsSection = createSection();\n\n        $('<button />').attr({\n            type: 'button',\n            'data-aui-checkbox-multiselect-clear': '',\n            class: 'aui-button aui-button-link'\n        })\n            .text(i18n.getText('aui.checkboxmultiselect.clear.selected'))\n            .appendTo($clearItemsSection);\n\n        // list of items\n        var $section = createSection();\n        var $itemList = $('<ul />').appendTo($section);\n\n        $.each(items, function (idx, item) {\n            var $li = $('<li />').attr({\n                class: item.styleClass || ''\n            }).appendTo($itemList);\n\n            var $a =  $('<a />')\n                .text(item.label)\n                .attr('data-value', item.value)\n                .addClass('aui-dropdown2-checkbox aui-dropdown2-interactive')\n                .appendTo($li);\n\n            if (item.icon) {\n                $('<span />')\n                    .addClass('aui-icon')\n                    .css('backgroundImage', 'url(' + item.icon + ')\")')\n                    .appendTo($a);\n            }\n\n            if (item.selected) {\n                $a.addClass('aui-dropdown2-checked');\n            }\n        });\n\n        return $('<div />')\n            .append($clearItemsSection)\n            .append($section)\n            .html();\n    },\n\n    furniture: function (name, optionsHtml) {\n        var dropdownId = name + '-dropdown';\n\n        var $select = $('<select />').attr({\n            name: name,\n            multiple: 'multiple'\n        }).html(optionsHtml);\n\n        var $dropdown = $('<div>')\n            .attr({\n                id: dropdownId,\n                class: 'aui-checkbox-multiselect-dropdown aui-dropdown2 aui-style-default'\n            });\n\n        var $button = $('<button />')\n            .attr({\n                class: 'aui-checkbox-multiselect-btn aui-button aui-dropdown2-trigger',\n                type: 'button',\n                'aria-owns': dropdownId,\n                'aria-haspopup': true\n            });\n\n        return $('<div />')\n            .append($select)\n            .append($button)\n            .append($dropdown)\n            .html();\n    }\n};\n\n/**\n * Handles when user clicks an item in the dropdown list. Either selects or unselects the corresponding\n * option in the <select>.\n * @private\n */\nfunction handleDropdownSelection (e) {\n    var $a = $(e.target);\n    var value = $a.attr('data-value');\n    updateOption(this, value, $a.hasClass('aui-dropdown2-checked'));\n}\n\n/**\n * Selects or unselects the <option> corresponding the given value.\n * @private\n * @param component - Checkbox MultiSelect web component\n * @param value - value of option to update\n * @param {Boolean} selected - select or unselect it.\n */\nfunction updateOption (component, value, selected) {\n    var $toUpdate = component.$select.find('option').filter(function () {\n        var $this = $(this);\n        return $this.attr('value') === value && $this.prop('selected') !== selected;\n    });\n    if ($toUpdate.length) {\n        $toUpdate.prop('selected', selected);\n        component.$select.trigger('change');\n    }\n}\n\n/**\n * Enables 'clear all' button if there are any selected <option>s, otherwise disables it.\n * @private\n */\nfunction updateClearAll (component) {\n    component.$dropdown.find('[data-aui-checkbox-multiselect-clear]').prop('disabled', function () {\n        return getSelectedDescriptors(component).length < 1;\n    });\n}\n\n/**\n * Gets button title used for tipsy. Is blank when dropdown is open so we don't get tipsy hanging over options.\n * @private\n * @param component\n * @returns {string}\n */\nfunction getButtonTitle (component) {\n    return component.$dropdown.is('[aria-hidden=false]') ? '' : getSelectedLabels(component).join(', ');\n}\n\n/**\n * Converts a jQuery collection of <option> elements into an object that describes them.\n * @param {jQuery} $options\n * @returns {Array<Object>}\n * @private\n */\nfunction mapOptionDescriptors ($options) {\n    return $options.map(function () {\n        var $option = $(this);\n        return {\n            value: $option.val(),\n            label: $option.text(),\n            icon: $option.data('icon'),\n            styleClass: $option.data('styleClass'),\n            title: $option.attr('title'),\n            disabled: $option.attr('disabled'),\n            selected: $option.prop('selected')\n        };\n    });\n}\n\n/**\n * Gets label for when nothing is selected\n * @returns {string}\n * @private\n */\nfunction getImplicitAllLabel (component) {\n    return $(component).data('allLabel') || 'All';\n}\n\n\n/**\n * Renders dropdown with list of items representing the selected or unselect state of the <option>s in <select>\n * @private\n */\nfunction renderDropdown (component) {\n    component.$dropdown.html(templates.dropdown(getDescriptors(component)));\n    updateClearAll(component);\n}\n\n/**\n * Renders button with the selected <option>'s innerText in a comma seperated list. If nothing is selected 'All'\n * is displayed.\n * @private\n */\nfunction renderButton (component) {\n    var selectedLabels = getSelectedLabels(component);\n    var label = isImplicitAll(component) ? getImplicitAllLabel(component) : selectedLabels.join(', ');\n    component.$btn.text(label);\n}\n\n/**\n * Gets descriptor for selected options, the descriptor is an object that contains meta information about\n * the option, such as value, label, icon etc.\n * @private\n * @returns Array<Object>\n */\nfunction getDescriptors (component) {\n    return mapOptionDescriptors(component.getOptions());\n}\n\n/**\n * Gets descriptor for selected options, the descriptor is an object that contains meta information about\n * the option, such as value, label, icon etc.\n * @private\n * @returns Array<Object>\n */\nfunction getSelectedDescriptors (component) {\n    return mapOptionDescriptors(component.getSelectedOptions());\n}\n\n/**\n * Gets the innerText of the selected options\n * @private\n * @returns Array<String>\n */\nfunction getSelectedLabels (component) {\n    return $.map(getSelectedDescriptors(component), function (descriptor) {\n        return descriptor.label;\n    });\n}\n\n/**\n * If nothing is selected, we take this to mean that everything is selected.\n * @returns Boolean\n */\nfunction isImplicitAll (component) {\n    return getSelectedDescriptors(component).length === 0;\n}\n\nconst CheckboxMultiselectEl = skate('aui-checkbox-multiselect', {\n    attached: function (component) {\n        // This used to be template logic, however, it breaks tests if we\n        // keep it there after starting to use native custom elements. This\n        // should be refactored.\n        //\n        // Ideally we should be templating the element within the \"template\"\n        // hook which will ensure it's templated prior to calling the\n        // \"attached\" callback.\n        var name = component.getAttribute('name') || uid('aui-checkbox-multiselect-');\n        component.innerHTML = templates.furniture(name, component.innerHTML);\n\n        component.$select = $('select', component)\n            .on('change', function () {\n                renderButton(component);\n                updateClearAll(component);\n            });\n\n        component.$dropdown = $('.aui-checkbox-multiselect-dropdown', component)\n            .on('aui-dropdown2-item-check', handleDropdownSelection.bind(component))\n            .on('aui-dropdown2-item-uncheck', handleDropdownSelection.bind(component))\n            .on('click', 'button[data-aui-checkbox-multiselect-clear]', component.deselectAllOptions.bind(component));\n\n        component.$btn = $('.aui-checkbox-multiselect-btn', component)\n            .tooltip({\n                title: function () {\n                    return getButtonTitle(component);\n                }\n            });\n\n        renderButton(component);\n        renderDropdown(component);\n    },\n    prototype: {\n\n        /**\n         * Gets all options regardless of selected or unselected\n         * @returns {jQuery}\n         */\n        getOptions: function () {\n            return this.$select.find('option');\n        },\n\n        /**\n         * Gets all selected options\n         * @returns {jQuery}\n         */\n        getSelectedOptions: function () {\n            return this.$select.find('option:selected');\n        },\n\n        /**\n         * Sets <option> elements matching given value to selected\n         */\n        selectOption: function (value) {\n            updateOption(this, value, true);\n        },\n\n        /**\n         * Sets <option> elements matching given value to unselected\n         */\n        unselectOption: function (value) {\n            updateOption(this, value, false);\n        },\n\n        /**\n         * Gets value of <select>\n         * @returns Array\n         */\n        getValue: function () {\n            return this.$select.val();\n        },\n\n        /**\n         * Unchecks all items in the dropdown and in the <select>\n         */\n        deselectAllOptions: function () {\n            this.$select.val([]).trigger('change');\n            this.$dropdown.find('.aui-dropdown2-checked,.checked').removeClass('aui-dropdown2-checked checked');\n        },\n\n        /**\n         * Adds an option to the <select>\n         * @param descriptor\n         */\n        addOption: function (descriptor) {\n            $('<option />').attr({\n                value: descriptor.value,\n                icon: descriptor.icon,\n                disabled: descriptor.disabled,\n                selected: descriptor.selected,\n                title: descriptor.title\n            })\n                .text(descriptor.label)\n                .appendTo(this.$select);\n            renderButton(this);\n            renderDropdown(this);\n        },\n\n        /**\n         * Removes options matching value from <select>\n         * @param value\n         */\n        removeOption: function (value) {\n            this.$select.find(\"[value='\" + value + \"']\").remove();\n            renderButton(this);\n            renderDropdown(this);\n        }\n    }\n});\n\namdify('aui/checkbox-multiselect', CheckboxMultiselectEl);\nexport default CheckboxMultiselectEl;\n"],"sourceRoot":""}