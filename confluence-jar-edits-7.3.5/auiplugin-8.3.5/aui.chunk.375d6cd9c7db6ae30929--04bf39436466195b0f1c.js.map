{"version":3,"sources":["webpack:///../src/js/aui/internal/animation.js"],"names":["recomputeStyle","el","jquery","window","getComputedStyle","getPropertyValue"],"mappings":"oKA+BIA,eANJ,SAAyBC,GACrBA,EAAKA,EAAGC,OAASD,EAAG,GAAKA,EACzBE,OAAOC,iBAAiBH,EAAI,MAAMI,iBAAiB","file":"aui.chunk.375d6cd9c7db6ae30929--04bf39436466195b0f1c.js","sourcesContent":["\n/**\n * Force a re-compute of the style of an element.\n *\n * This is useful for CSS transitions and animations that need computed style changes to occur.\n * CSS transitions will fire when the computed value of the property they are transitioning changes.\n * This may not occur if the style changes get batched into one style change event by the browser.\n * We can force the browser to recognise the two different computed values by calling this function when we want it\n * to recompute the styles.\n *\n * For example, consider a transition on the opacity property.\n *\n * With recomputeStyle:\n * $parent.append($el); //opacity=0\n * recomputeStyle($el);\n * $el.addClass('visible'); //opacity=1\n * //Browser calculates value of opacity=0, and then transitions it to opacity=1\n *\n * Without recomputeStyle:\n * $parent.append($el); //opacity=0\n * $el.addClass('visible'); //opacity=1\n * //Browser calculates value of opacity=1 but no transition\n *\n * @param el The DOM or jQuery element for which style should be recomputed\n */\nfunction recomputeStyle (el) {\n    el = el.jquery ? el[0] : el;\n    window.getComputedStyle(el, null).getPropertyValue('left');\n}\n\nexport {\n    recomputeStyle\n};\n"],"sourceRoot":""}