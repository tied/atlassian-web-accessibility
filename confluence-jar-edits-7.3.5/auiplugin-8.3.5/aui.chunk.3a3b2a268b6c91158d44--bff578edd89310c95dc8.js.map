{"version":3,"sources":["webpack:///./aui.component.form.toggle.js","webpack:///../src/js/aui/toggle.js"],"names":["default","__webpack_require__","_attributes","_constants","_spinner","fireChangeEvent","element","_canFireEventsNow","dispatchEvent","CustomEvent","bubbles","getInput","_input","querySelector","getSpinner","SpinnerEl","removedAttributeHandler","attributeName","removeAttribute","fallbackAttributeHandler","change","setAttribute","newValue","getAttributeHandler","removed","bind","this","fallback","formAttributeHandler","call","_formId","idAttributeHandler","undefined","val","INPUT_SUFFIX","valueAttributeHandler","value","checkedAttributeHandler","checked","labelHandler","ToggleEl","_skate2","template","_skatejsTemplateHtml2","created","SIZE","SMALL","name","_jquery2","tooltip","title","getAttribute","gravity","hoverable","addEventListener","e","busy","keyCode","SPACE","preventDefault","navigator","userAgent","toLowerCase","indexOf","bindEventsToInput","hasAttribute","attached","_enforcer2","attributeExists","events","click","input","disabled","target","setBooleanAttribute","attributes","id","form","tooltip-on","I18n","getText","tooltip-off","label","prototype","focus","document","getElementById","newVal","spinner","indeterminate","classList","add","append","remove","parentNode","removeChild","Array","forEach","querySelectorAll","el","setDisabledForLabels"],"mappings":"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","file":"aui.chunk.3a3b2a268b6c91158d44--bff578edd89310c95dc8.js","sourcesContent":["import './styles/aui.pattern.forms';\nimport './aui.component.spinner'; // for the async variant\nimport '@atlassian/aui/src/less/aui-toggle.less';\nexport { default as ToggleEl } from '@atlassian/aui/src/js/aui/toggle';\n","import './spin';\nimport './tooltip';\nimport { setBooleanAttribute } from './internal/attributes';\nimport $ from './jquery';\nimport enforce from './internal/enforcer';\nimport keyCode from './key-code';\nimport skateTemplateHtml from 'skatejs-template-html';\nimport skate from './internal/skate';\nimport { INPUT_SUFFIX } from './internal/constants';\nimport CustomEvent from './polyfills/custom-event';\nimport SpinnerEl, {SIZE} from './spinner';\nimport I18n from './i18n'\n\nfunction fireChangeEvent(element) {\n    if (element._canFireEventsNow) {\n        element.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n    }\n}\n\nfunction getInput (element) {\n    return element._input || (element._input = element.querySelector('input'));\n}\n\nfunction getSpinner (element) {\n    return element._spinner || (element._spinner = new SpinnerEl());\n}\n\nfunction removedAttributeHandler(attributeName, element) {\n    getInput(element).removeAttribute(attributeName);\n}\n\nfunction fallbackAttributeHandler(attributeName, element, change) {\n    getInput(element).setAttribute(attributeName, change.newValue);\n}\n\nfunction getAttributeHandler (attributeName) {\n    return {\n        removed: removedAttributeHandler.bind(this, attributeName),\n        fallback: fallbackAttributeHandler.bind(this, attributeName)\n    };\n}\n\nconst formAttributeHandler = {\n    removed: function (element) {\n        removedAttributeHandler.call(this, 'form', element);\n        element._formId = null;\n    },\n    fallback: function (element, change) {\n        fallbackAttributeHandler.call(this, 'form', element, change);\n        element._formId = change.newValue;\n    }\n};\n\nvar idAttributeHandler = {\n    removed: removedAttributeHandler.bind(this, 'id'),\n    fallback: function (element, change) {\n        const val = `${change.newValue}${INPUT_SUFFIX}`;\n        getInput(element).setAttribute('id', val);\n    }\n};\n\nvar valueAttributeHandler = {\n    removed: function(element) {\n        removedAttributeHandler.call(this, 'value', element);\n        // Internet Explorer 11 has a bug where it doesn't clear out the previous value\n        // when the attribute is removed.\n        getInput(element).value = 'on';\n    },\n    fallback: function (element, change) {\n        fallbackAttributeHandler.call(this, 'value', element, change);\n    }\n};\n\nvar checkedAttributeHandler = {\n    removed: function (element) {\n        getInput(element).checked = false;\n        fireChangeEvent(element);\n    },\n    fallback: function (element) {\n        getInput(element).checked = true;\n        fireChangeEvent(element);\n    }\n};\n\nvar labelHandler = {\n    removed: function (element) {\n        getInput(element).removeAttribute('aria-label');\n    },\n    fallback: function (element, change) {\n        getInput(element).setAttribute('aria-label', change.newValue);\n    }\n};\n\nfunction clickHandler(element, e) {\n    var input = getInput(element);\n    if (!element.disabled && !element.busy && e.target !== input) {\n        input.checked = !input.checked;\n    }\n\n    setBooleanAttribute(element, 'checked', input.checked);\n}\n\nfunction setDisabledForLabels(element, disabled) {\n    if (!element.id) {\n        return;\n    }\n    Array.prototype.forEach.call(document.querySelectorAll(`aui-label[for=\"${element.id}\"]`), function (el) {\n        el.disabled = disabled;\n    });\n}\n\n/**\n * Workaround to prevent pressing SPACE on busy state.\n * Preventing click event still makes the toggle flip and revert back.\n * So on CSS side, the input has \"pointer-events: none\" on busy state.\n */\nfunction bindEventsToInput(element) {\n    getInput(element).addEventListener('keydown', function (e) {\n        if (element.busy && e.keyCode === keyCode.SPACE) {\n            e.preventDefault();\n        }\n    });\n    // prevent toggle can be trigger through SPACE key on Firefox\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        getInput(element).addEventListener('click', function (e) {\n            if (element.busy) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n\nconst ToggleEl = skate('aui-toggle', {\n    // \"assistive\" class avoids direct interaction with the <input> element\n    // (which prevents our click handler from being called),\n    // while allow the element to still participate in the form.\n    template: skateTemplateHtml(\n        '<input type=\"checkbox\" class=\"aui-toggle-input assistive\">',\n        '<span class=\"aui-toggle-view\">',\n        '<span class=\"aui-toggle-tick aui-icon aui-icon-small aui-iconfont-success\"></span>',\n        '<span class=\"aui-toggle-cross aui-icon aui-icon-small aui-iconfont-close-dialog\"></span>',\n        '</span>'\n    ),\n    created: function (element) {\n        getInput(element); // avoid using _input in attribute handlers\n        getSpinner(element).setAttribute('size', SIZE.SMALL.name);\n\n        $(getInput(element)).tooltip({\n            title: function () {\n                return this.checked ? this.getAttribute('tooltip-on') : this.getAttribute('tooltip-off');\n            },\n            gravity: 's',\n            hoverable: false\n        });\n        bindEventsToInput(element);\n        if (element.hasAttribute('checked')) {\n            getInput(element).setAttribute('checked', '');\n        }\n        element._canFireEventsNow = true;\n    },\n    attached: function (element) {\n        enforce(element).attributeExists('label');\n    },\n    events: {\n        click: clickHandler\n    },\n    attributes: {\n        id: idAttributeHandler,\n        checked: checkedAttributeHandler,\n        disabled: getAttributeHandler('disabled'),\n        form: formAttributeHandler,\n        name: getAttributeHandler('name'),\n        value: valueAttributeHandler,\n        'tooltip-on': {\n            value: I18n.getText('aui.toggle.on'),\n            fallback: function (element, change) {\n                getInput(element).setAttribute('tooltip-on', change.newValue || I18n.getText('aui.toggle.on'));\n            }\n        },\n        'tooltip-off': {\n            value: I18n.getText('aui.toggle.off'),\n            fallback: function (element, change) {\n                getInput(element).setAttribute('tooltip-off', change.newValue || I18n.getText('aui.toggle.off'));\n            }\n        },\n        label: labelHandler\n    },\n    prototype: {\n        focus: function () {\n            getInput(this).focus();\n            return this;\n        },\n        get checked () {\n            return getInput(this).checked;\n        },\n        set checked (value) {\n            // Need to explicitly set the property on the checkbox because the\n            // checkbox's property doesn't change with it's attribute after it\n            // is clicked.\n            if (getInput(this).checked !== value) {\n                getInput(this).checked = value;\n                setBooleanAttribute(this, 'checked', value);\n            }\n        },\n        get disabled () {\n            // AUI-4958 - this may be accessed by a jQuery event handler in response to\n            // a DOMNodeInserted event being fired. In this scenario, the `template`\n            // function has been called by skate, but the `created` callback has not.\n            return getInput(this).disabled;\n        },\n        set disabled (value) {\n            return setBooleanAttribute(this, 'disabled', value);\n        },\n        get form () {\n            return document.getElementById(this._formId);\n        },\n        set form (value) {\n            formAttributeHandler.fallback.call(this, this, { newValue: value || null });\n            return this.form;\n        },\n        get name () {\n            return getInput(this).name;\n        },\n        set name (value) {\n            this.setAttribute('name', value);\n            return value;\n        },\n        get value () {\n            return getInput(this).value;\n        },\n        set value (value) {  // Setting the value of an input to null sets it to empty string.\n            let newVal = value === null ? '' : value;\n            this.setAttribute('value', newVal);\n            return newVal;\n        },\n        get busy () {\n            return getInput(this).getAttribute('aria-busy') === 'true';\n        },\n        set busy (value) {\n            const input = getInput(this);\n            const spinner = getSpinner(this);\n\n            setBooleanAttribute(this, 'busy', value);\n\n            if (value) {\n                input.setAttribute('aria-busy', 'true');\n                input.indeterminate = true;\n                if (this.checked) {\n                    input.classList.add('indeterminate-checked');\n                    $(this.querySelector('.aui-toggle-tick')).append(spinner);\n                } else {\n                    $(this.querySelector('.aui-toggle-cross')).append(spinner);\n                }\n            } else {\n                input.classList.remove('indeterminate-checked');\n                input.indeterminate = false;\n                input.removeAttribute('aria-busy');\n                if (spinner.parentNode) {\n                    spinner.parentNode.removeChild(this._spinner);\n                }\n            }\n            setDisabledForLabels(this, !!value);\n            return value;\n        }\n    }\n});\n\nexport default ToggleEl;\n"],"sourceRoot":""}