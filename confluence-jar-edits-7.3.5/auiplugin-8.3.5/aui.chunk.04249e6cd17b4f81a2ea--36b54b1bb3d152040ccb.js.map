{"version":3,"sources":["webpack:///../src/js/aui/progressive-data-set.js"],"names":["_underscore","__webpack_require__","ProgressiveDataSet","Backbone","Collection","extend","initialize","models","options","matcher","this","model","_idAttribute","idAttribute","_maxResults","maxResults","_queryData","queryData","_queryParamKey","queryParamKey","_queryEndpoint","queryEndpoint","value","queryCache","activeQueryCount","bindAll","url","query","remote","results","_this","getFilteredResults","respond","hasQueryCache","shouldGetMoreResults","fetch","trigger","activity","always","done","resp","succ","xhr","addQueryCache","getQueryData","params","isFunction","data","add","update","remove","prototype","call","item","filter","first","response","cache","parse","pluck","hasOwnProperty","findQueryCache","length","setMaxResults","number","_globalize2","default"],"mappings":"kKAAA,IAAAA,EAAAC,EAAA,YACAA,EAAA,aACAA,EAAA,4DAOA,IAAIC,EAAqBC,UAASC,WAAWC,QAyBzCC,WAAY,SAAUC,EAAQC,GAC1BA,IAAYA,MACRA,EAAQC,UACRC,KAAKD,QAAUD,EAAQC,SAEvBD,EAAQG,QACRD,KAAKC,MAAQH,EAAQG,OAEzBD,KAAKE,cAAgB,IAAIF,KAAKC,OAASE,YACvCH,KAAKI,YAAcN,EAAQO,YAAc,EACzCL,KAAKM,WAAaR,EAAQS,cAC1BP,KAAKQ,eAAiBV,EAAQW,eAAiB,IAC/CT,KAAKU,eAAiBZ,EAAQa,eAAiB,GAC/CX,KAAKY,MAAQ,KACbZ,KAAKa,cACLb,KAAKc,iBAAmB,GACxB,EAAAxB,EAAAyB,SAAQf,KAAM,QAAS,YAG3BgB,IAAK,WACD,OAAOhB,KAAKU,gBAUhBO,MAAO,SAAUA,GAAO,IAChBC,EACAC,EAFgBC,EAAApB,KAIpBA,KAAKY,MAAQK,EACbE,EAAUnB,KAAKqB,mBAAmBJ,GAClCjB,KAAKsB,QAAQL,EAAOE,GAEfF,GAAUjB,KAAKU,iBAAkBV,KAAKuB,cAAcN,IAAWjB,KAAKwB,qBAAqBL,KAI9FD,EAASlB,KAAKyB,MAAMR,GAEpBjB,KAAKc,mBACLd,KAAK0B,QAAQ,YAAaC,UAAU,IAEpCT,EAAOU,OAAO,WACVR,EAAKN,mBACLM,EAAKM,QAAQ,YAAaC,WAAYP,EAAKN,qBAG/CI,EAAOW,KAAK,SAACC,EAAMC,EAAMC,GACrBZ,EAAKa,cAAchB,EAAOa,EAAME,KAEpCd,EAAOW,KAAK,WACRZ,EAAQG,EAAKR,MACbO,EAAUC,EAAKC,mBAAmBJ,GAClCG,EAAKE,QAAQL,EAAOE,OAU5Be,aAAc,SAAUjB,GACpB,IAAIkB,GAAS,EAAA7C,EAAA8C,YAAWpC,KAAKM,YAAcN,KAAKM,WAAWW,GAASjB,KAAKM,WACrE+B,GAAO,EAAA/C,EAAAK,WAAWwC,GAEtB,OADAE,EAAKrC,KAAKQ,gBAAkBS,EACrBoB,GASXZ,MAAO,SAAUR,GACb,IAGIkB,GAAUG,KAAK,EAAMC,QAAQ,EAAMC,QAAQ,EAAOH,KAH3CrC,KAAKkC,aAAajB,IAK7B,OADaxB,UAASC,WAAW+C,UAAUhB,MAAMiB,KAAK1C,KAAMmC,IAYhEb,QAAS,SAAUL,EAAOE,GAKtB,OAJAnB,KAAK0B,QAAQ,WACTT,MAAOA,EACPE,QAASA,IAENA,GAeXpB,QAAS,SAAU4C,EAAM1B,KAWzBI,mBAAoB,SAAUJ,GAC1B,IAAIE,KACJ,OAAKF,GAGLE,EAAUnB,KAAK4C,OAAO,SAAUD,GAC5B,QAAS3C,KAAKD,QAAQ4C,EAAM1B,IAC7BjB,MACCA,KAAKI,cACLe,GAAU,EAAA7B,EAAAuD,OAAM1B,EAASnB,KAAKI,cAE3Be,GARIA,GAmBfc,cAAe,SAAUhB,EAAO6B,EAAUd,GACtC,IAAIe,EAAQ/C,KAAKa,WACbM,EAAUnB,KAAKgD,MAAMF,EAAUd,GACnCe,EAAM9B,IAAS,EAAA3B,EAAA2D,OAAM9B,EAASnB,KAAKE,eASvCqB,cAAe,SAAUN,GACrB,OAAOjB,KAAKa,WAAWqC,eAAejC,IAS1CkC,eAAgB,SAAUlC,GACtB,OAAOjB,KAAKa,WAAWI,IAS3BO,qBAAsB,SAAUL,GAC5B,OAAOA,EAAQiC,OAASpD,KAAKI,aAQjCiD,cAAe,SAAUC,GACrBtD,KAAKI,YAAckD,EACnBtD,KAAKY,OAASZ,KAAKsB,QAAQtB,KAAKY,MAAOZ,KAAKqB,mBAAmBrB,KAAKY,YAI5E,EAAA2C,EAAAC,SAAU,qBAAsBhE,aAEjBA","file":"aui.chunk.04249e6cd17b4f81a2ea--36b54b1bb3d152040ccb.js","sourcesContent":["import { bindAll, extend, first, isFunction, pluck } from 'underscore';\nimport Backbone from 'backbone';\nimport globalize from './internal/globalize';\n\n/**\n * @fileOverview describes a ProgressiveDataSet object.\n *\n * This object serves as part of a series of components to handle the various aspects of autocomplete controls.\n */\nvar ProgressiveDataSet = Backbone.Collection.extend({\n    /**\n     * A queryable set of data that optimises the speed at which responses can be provided.\n     *\n     * ProgressiveDataSet should be given a matcher function so that it may filter results for queries locally.\n     *\n     * ProgressiveDataSet can be given a remote query endpoint to fetch data from. Should a remote endpoint\n     * be provided, ProgressiveDataSet will leverage both client-side matching and query caching to reduce\n     * the number of times the remote source need be queried.\n     *\n     * @example\n     * var source = new ProgressiveDataSet([], {\n     *     model: Backbone.Model.extend({ idAttribute: \"username\" }),\n     *     queryEndpoint: \"/jira/rest/latest/users\",\n     *     queryParamKey: \"username\",\n     *     matcher: function(model, query) {\n     *         return _.startsWith(model.get('username'), query);\n     *     }\n     * });\n     * source.on('respond', doStuffWithMatchingResults);\n     * source.query('john');\n     *\n     * @property {String} value the latest query for which the ProgressiveDataSet is responding to.\n     * @property {Number} activeQueryCount the number of queries being run remotely.\n     */\n    initialize: function (models, options) {\n        options || (options = {});\n        if (options.matcher) {\n            this.matcher = options.matcher;\n        }\n        if (options.model) {\n            this.model = options.model; // Fixed in backbone 0.9.2\n        }\n        this._idAttribute = (new this.model()).idAttribute;\n        this._maxResults = options.maxResults || 5;\n        this._queryData = options.queryData || {};\n        this._queryParamKey = options.queryParamKey || 'q';\n        this._queryEndpoint = options.queryEndpoint || '';\n        this.value = null;\n        this.queryCache = {};\n        this.activeQueryCount = 0;\n        bindAll(this, 'query', 'respond');\n    },\n\n    url: function () {\n        return this._queryEndpoint;\n    },\n\n    /**\n     * Sets and runs a query against the ProgressiveDataSet.\n     *\n     * Bind to ProgressiveDataSet's 'respond' event to receive the results that match the latest query.\n     *\n     * @param {String} query the query to run.\n     */\n    query: function (query) {\n        var remote;\n        var results;\n\n        this.value = query;\n        results = this.getFilteredResults(query);\n        this.respond(query, results);\n\n        if (!query || !this._queryEndpoint || this.hasQueryCache(query) || !this.shouldGetMoreResults(results)) {\n            return;\n        }\n\n        remote = this.fetch(query);\n\n        this.activeQueryCount++;\n        this.trigger('activity', {activity: true});\n\n        remote.always(() => {\n            this.activeQueryCount--;\n            this.trigger('activity', {activity: !!this.activeQueryCount});\n        });\n\n        remote.done((resp, succ, xhr) => {\n            this.addQueryCache(query, resp, xhr);\n        });\n        remote.done(() => {\n            query = this.value;\n            results = this.getFilteredResults(query);\n            this.respond(query, results);\n        });\n    },\n\n    /**\n     * Gets all the data that should be sent in a remote request for data.\n     * @param {String} query the value of the query to be run.\n     * @return {Object} the data to to be sent to the remote when querying it.\n     * @private\n     */\n    getQueryData: function (query) {\n        var params = isFunction(this._queryData) ? this._queryData(query) : this._queryData;\n        var data = extend({}, params);\n        data[this._queryParamKey] = query;\n        return data;\n    },\n\n    /**\n     * Get data from a remote source that matches the query, and add it to this ProgressiveDataSet's set.\n     *\n     * @param {String} query the value of the query to be run.\n     * @return {jQuery.Deferred} a deferred object representing the remote request.\n     */\n    fetch: function (query) {\n        var data = this.getQueryData(query);\n        // {add: true} for Backbone <= 0.9.2\n        // {update: true, remove: false} for Backbone >= 0.9.9\n        var params = {add: true, update: true, remove: false, data: data};\n        var remote = Backbone.Collection.prototype.fetch.call(this, params);\n        return remote;\n    },\n\n    /**\n     * Triggers the 'respond' event on this ProgressiveDataSet for the given query and associated results.\n     *\n     * @param {String} query the query that was run\n     * @param {Array} results a set of results that matched the query.\n     * @return {Array} the results.\n     * @private\n     */\n    respond: function (query, results) {\n        this.trigger('respond', {\n            query: query,\n            results: results\n        });\n        return results;\n    },\n\n    /**\n     * A hook-point to define a function that tests whether a model matches a query or not.\n     *\n     * This will be called by getFilteredResults in order to generate the list of results for a query.\n     *\n     * (For you java folks, it's essentially a predicate.)\n     *\n     * @param {Backbone.Model} item a model of the data to check for a match in.\n     * @param {String} query the value to test against the item.\n     * @returns {Boolean} true if the model matches the query, otherwise false.\n     * @function\n     */\n    matcher: function (item, query) { }, // eslint-disable-line no-unused-vars\n\n    /**\n     * Filters the set of data contained by the ProgressiveDataSet down to a smaller set of results.\n     *\n     * The set will only consist of Models that \"match\" the query -- i.e., only Models where\n     * a call to ProgressiveDataSet#matcher returns true.\n     *\n     * @param query {String} the value that results should match (according to the matcher function)\n     * @return {Array} A set of Backbone Models that match the query.\n     */\n    getFilteredResults: function (query) {\n        var results = [];\n        if (!query) {\n            return results;\n        }\n        results = this.filter(function (item) {\n            return !!this.matcher(item, query);\n        }, this);\n        if (this._maxResults) {\n            results = first(results, this._maxResults);\n        }\n        return results;\n    },\n\n    /**\n     * Store a response in the query cache for a given query.\n     *\n     * @param {String} query the value to cache a response for.\n     * @param {Object} response the data of the response from the server.\n     * @param {XMLHttpRequest} xhr\n     * @private\n     */\n    addQueryCache: function (query, response, xhr) {\n        var cache = this.queryCache;\n        var results = this.parse(response, xhr);\n        cache[query] = pluck(results, this._idAttribute);\n    },\n\n    /**\n     * Check if there is a query cache entry for a given query.\n     *\n     * @param query the value to check in the cache\n     * @return {Boolean} true if the cache contains a response for the query, false otherwise.\n     */\n    hasQueryCache: function (query) {\n        return this.queryCache.hasOwnProperty(query);\n    },\n\n    /**\n     * Get the query cache entry for a given query.\n     *\n     * @param query the value to check in the cache\n     * @return {Object[]} an array of values representing the IDs of the models the response for this query contained.\n     */\n    findQueryCache: function (query) {\n        return this.queryCache[query];\n    },\n\n    /**\n     *\n     * @param {Array} results the set of results we know about right now.\n     * @return {Boolean} true if the ProgressiveDataSet should look for more results.\n     * @private\n     */\n    shouldGetMoreResults: function (results) {\n        return results.length < this._maxResults;\n    },\n\n    /**\n     *\n     * @note Changing this value will trigger ProgressiveDataSet#event:respond if there is a query.\n     * @param {Number} number how many results should the ProgressiveDataSet aim to retrieve for a query.\n     */\n    setMaxResults: function (number) {\n        this._maxResults = number;\n        this.value && this.respond(this.value, this.getFilteredResults(this.value));\n    }\n});\n\nglobalize('ProgressiveDataSet', ProgressiveDataSet);\n\nexport default ProgressiveDataSet;\n"],"sourceRoot":""}