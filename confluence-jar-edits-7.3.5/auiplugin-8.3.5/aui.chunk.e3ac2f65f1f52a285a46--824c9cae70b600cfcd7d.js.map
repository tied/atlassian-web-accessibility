{"version":3,"sources":["webpack:///../src/js/jquery/jquery.throbber.js"],"names":["jQuery","fn","throbber","$","instances","defaults","isLatentThreshold","minThrobberDisplay","loadingClass","document","ajaxComplete","jObj","response","each","idx","this","get","hideThrobber","splice","settings","hide","target","delay","callback","l","t","setTimeout","clearTimeout","undefined","extend","push","showThrobber","addClass","removeClass","end"],"mappings":"iHAUAA,OAAOC,GAAGC,SAAW,SAAUC,GAE3B,OAAO,WAGH,IAAIC,KACAC,GAAYC,kBAAmB,IAAKC,mBAAoB,IAAKC,aAAc,WAc/E,OAXAL,EAAEM,UAAUC,aAAa,SAAUC,EAAMC,GACrCT,EAAEC,GAAWS,KAAK,SAAUC,GAEpBF,IAAaG,KAAKC,IAAI,KACtBD,KAAKE,eAELb,EAAUc,OAAOJ,EAAI,QAK1B,SAAUK,GAEb,IAAIC,EACAC,EAQAC,EAAQ,SAARA,EAAkBC,EAAUC,GAC5BF,EAAMG,EAAIC,WAAW,WACjBC,aAAaL,EAAMG,GACnBH,EAAMG,OAAIG,EACVL,KACDC,IAKP,OAFAL,EAAWhB,EAAE0B,OAAOxB,EAAUc,QAEhBE,QAKdA,EAASrB,OAAOmB,EAASE,QAEzBjB,EAAU0B,KAAK3B,EAAE0B,OAAOd,MAKpBgB,aAAc,WACVT,EAAM,WACGF,IACDC,EAAOW,SAASb,EAASX,cACzBc,EAAM,WACEF,GACAA,KAELD,EAASZ,sBAEjBY,EAASb,oBAOhBW,aAAc,WACVG,EAAO,WACHC,EAAOY,YAAYd,EAASX,cACxBW,EAASe,KACTf,EAASe,OAGZZ,EAAMG,GACPL,QAMZL,KAAKgB,eACEhB,MA3CIA,MAxCZ,GAFU,CAwFnBf","file":"aui.chunk.e3ac2f65f1f52a285a46--824c9cae70b600cfcd7d.js","sourcesContent":["\n/**\n * @function {Public}\n * @param {Object} target - jQuery object we will be applying the loadingClass to.\n * @param {Object} settings\n * @.. {String} isLatentThreshold (ms) - will wait for this amount of time, after which if the request has not come back, will add the loadingClass\n * @.. {String} minThrobberDisplay (ms) - minimum amount of time to display throbber, avoids flicker.\n * @.. {String} loadingClass - className applied to target element\n * @return {Object} jQuery object that has new hideThrobber & showThrobber methods\n */\njQuery.fn.throbber = function ($) {\n\n    return function () {\n        // private\n\n        var instances = [];\n        var defaults = {isLatentThreshold: 100, minThrobberDisplay: 200, loadingClass: 'loading'};\n\n        // global definition\n        $(document).ajaxComplete(function (jObj, response) {\n            $(instances).each(function (idx) {\n                // make sure we are dealing with the right request\n                if (response === this.get(0)) {\n                    this.hideThrobber();\n                    // cleanup\n                    instances.splice(idx,1);\n                }\n            });\n        });\n\n        return function (settings) {\n            /** {Function} - defined by hideThrobber but run by either showThrobber or hideThrobber depending if the request is latent */\n            var hide;\n            var target;\n\n            /**\n             * Runs a callback after specified delay\n             * @method {private} delay\n             * @param {Integer} l - length of delay (ms)\n             * @param {Function} callback - function to run after delay\n             */\n            var delay = function (callback, l) {\n                delay.t = setTimeout(function () {\n                    clearTimeout(delay.t);\n                    delay.t = undefined;\n                    callback();\n                }, l);\n            };\n\n            settings = $.extend(defaults, settings || {});\n\n            if (!settings.target) {\n                return this;\n            }\n\n            // make sure we are dealing with a jquery object\n            target = jQuery(settings.target);\n\n            instances.push($.extend(this, {\n                /**\n                 * Adds loadingClass to target htmlElement after the request appears to be latent\n                 * @function {Public} showThrobber\n                 */\n                showThrobber: function () {\n                    delay(function () {\n                        if (!hide) {\n                            target.addClass(settings.loadingClass);\n                            delay(function () {\n                                if (hide) {\n                                    hide();\n                                }\n                            }, settings.minThrobberDisplay);\n                        }\n                    }, settings.isLatentThreshold);\n                },\n\n                /**\n                 * removes loadingClass from target htmlElement\n                 * @function {Public} showThrobber\n                 */\n                hideThrobber: function () {\n                    hide = function () {\n                        target.removeClass(settings.loadingClass);\n                        if (settings.end) {\n                            settings.end();\n                        }\n                    };\n                    if (!delay.t) {\n                        hide();\n                    }\n                }\n            }));\n\n            // lets initiate this instance\n            this.showThrobber();\n            return this;\n        };\n    }();\n}(jQuery);\n"],"sourceRoot":""}