{"version":3,"sources":["webpack:///../src/js/aui/restful-table/edit-row.js","webpack:///../src/js/aui/restful-table/entry-model.js","webpack:///./aui.component.restful-table.js","webpack:///../src/js/aui/restful-table/event-names.js","webpack:///../src/js/aui/restful-table.js","webpack:///../src/js/aui/restful-table/event-handlers.js","webpack:///../src/js/aui/restful-table/custom-create-view.js","webpack:///../src/js/aui/restful-table/custom-edit-view.js","webpack:///../src/js-vendor/jquery/serializetoobject.js","webpack:///../src/js/aui/restful-table/data-keys.js","webpack:///../src/js/aui/restful-table/spinner.js","webpack:///../src/js/aui/restful-table/custom-read-view.js","webpack:///../src/js/aui/restful-table/class-names.js","webpack:///../src/js/aui/restful-table/row.js"],"names":["__webpack_require__","_spinner","isFirefox","navigator","userAgent","toLowerCase","indexOf","Backbone","View","extend","tagName","events","focusin","click","keyup","initialize","options","_this","this","$el","_jquery2","default","el","_event","classNames","dataKeys","columns","isCreateRow","allowReorder","CANCEL","delegateEvents","isUpdateMode","_modelClass","model","fieldFocusSelector","on","disabled","SAVE","focusUpdated","submit","FOCUS","name","focus","BLUR","removeClass","FOCUSED","disable","SUBMIT_STARTED","_submitStarted","SUBMIT_FINISHED","_submitFinished","defaultColumnRenderer","data","allowEdit","addClass","attr","value","document","createTextNode","renderDragHandle","DRAG_HANDLE","_handleKeyUpEvent","e","keyCode","trigger","_cancel","preventDefault","submitting","showLoading","hideLoading","enable","_focus","hasFocus","target","hasClass","$focus","$error","find","ERROR","length","parent","$replacementSubmit","$submit","SUBMIT","val","ENABLED_SUBMIT","replaceWith","DISABLED","$placeholderSubmit","removeAttr","appendStatusSpinner","removeStatusSpinner","hasUpdates","mapSubmitParams","serializeObject","serialize","params","changedAttributes","values","instance","activeElement","window","blur","clear","save","success","UPDATED","CREATED","toJSON","render","errors","error","xhr","status","renderErrors","VALIDATION_ERROR","silent","renderError","msg","text","$","remove","each","closest","append","renderData","empty","ORDER","appendTo","i","column","contents","$cell","id","args","createView","editView","apply","_typeof","done","styleClass","renderOperations","update","ROW","EDIT_ROW","RENDER","CONTENT_REFRESHED","$operations","accesskey","submitAccessKey","i18n","getText","cancelAccessKey","add","STATUS","_eventHandlers","_underscore","EntryModel","Model","sync","method","oldError","_serverErrorHandler","arguments","attributes","syncModel","parseJSON","responseText","call","isNew","prototype","url","set","destroy","ajax","type","dataType","contentType","collection","changed","current","isEqual","trim","isArray","isEmpty","addExpand","ajaxOptions","triggerEvtForInst","SERVER_ERROR","fetch","REORDER_SUCCESS","ROW_ADDED","ROW_REMOVED","MODAL","MODELESS","FINISHED_EDITING","INITIALIZED","ROW_INITIALIZED","ROW_EDIT","logger","RestfulTable","_getDefaultOptions","$table","RESTFUL_TABLE","ALLOW_HOVER","wrapAll","$thead","$theadRow","$tbody","Error","selector","deleteConfirmationCallback","Function","showGlobalLoading","forEach","header","isFunction","warn","_models","_createCollection","_rowClass","views","row","editRows","focusedRow","prepend","sortable","handle","helper","elt","MOVEABLE","children","$td","borderLeft","parseInt","css","borderRight","width","clientWidth","html","left","offset","body","start","event","ui","cachedHeight","clientHeight","$this","placeholder","item","eq","td","getColumnCount","height","visibility","getRowFromElement","stop","is","context","nextItem","next","prevItem","prev","move","axis","delay","containment","cursor","scroll","zIndex","allowCreate","_createRow","editRow","resources","self","addPosition","createPosition","addRow","$create","CREATE","_applyFocusCoordinator","getRows","removeRow","fetchInitialResources","all","entries","populate","get","createRequest","afterElement","after","position","reverseOrder","JSON","stringify","complete","responseData","Collection","sort","comparator","tableRows","models","sortBy","undefined","_len","Array","_key","index","some","reverse","hideGlobalLoading","reset","renderRows","showNoEntriesMsg","autoFocus","$loading","spinner","loadingMsg","insertAfter","view","_renderRow","removeNoEntriesMsg","getModels","getTable","getTableBody","getCreateRow","staticFieldCount","tr","ROW_VIEW","$noEntries","NO_ENTRIES","noEntriesMsg","READ_ONLY","push","$row","$rows","allowDelete","field","edit","insertBefore","isRowBeingEdited","isBeingEdited","hasFocusBound","Row","_removeEditRow","inArray","splice","_shiftFocusAfterEdit","_saveEditRowOnBlur","dismissEditRows","off","rows","els","map","EditRow","ClassNames","CustomCreateView","CustomEditView","CustomReadView","DataKeys","Events","_globalize2","eventRoot","$eventTarget","triggerEvt","bindEvt","func","bind","evt","inst","jQuery","fn","match","$select","SPINNER_SELECTOR","NO_VALUE","ACTIVE","EDITABLE","DELETE","click .aui-restfultable-editable","unfocus","toString","refresh","_this2","promise","then","$opsCell","$throbberCell","fieldName","readView","$editableRegion","emptyText"],"mappings":"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","file":"aui.chunk.402a2575a4db405bbd5a--fc9eff653d0e61a087d2.js","sourcesContent":["import $ from '../jquery';\nimport '../../../js-vendor/jquery/serializetoobject';\nimport Backbone from 'backbone';\nimport classNames from './class-names';\nimport dataKeys from './data-keys';\nimport events from './event-names';\nimport i18n from '../i18n';\nimport {appendStatusSpinner, removeStatusSpinner} from './spinner';\n\nvar isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;\n\n/**\n * An abstract class that gives the required behaviour for the creating and editing entries. Extend this class and pass\n * it as the {views.row} property of the options passed to RestfulTable in construction.\n */\nexport default Backbone.View.extend({\n    tagName: 'tr',\n\n    // delegate events\n    events: {\n        'focusin': '_focus',\n        'click': '_focus',\n        'keyup': '_handleKeyUpEvent'\n    },\n\n    /**\n     * @constructor\n     * @param {Object} options\n     */\n    initialize: function (options) {\n        this.$el = $(this.el);\n\n        // faster lookup\n        this._event = events;\n        this.classNames = classNames;\n        this.dataKeys = dataKeys;\n        this.columns = options.columns;\n        this.isCreateRow = options.isCreateRow;\n        this.allowReorder = options.allowReorder;\n\n        // Allow cancelling an edit with support for setting a new element.\n        this.events['click .' + this.classNames.CANCEL] = '_cancel';\n        this.delegateEvents();\n\n        if (options.isUpdateMode) {\n            this.isUpdateMode = true;\n        } else {\n            this._modelClass = options.model;\n            this.model = new this._modelClass();\n        }\n\n        this.fieldFocusSelector = options.fieldFocusSelector;\n        this\n            .on(this._event.CANCEL, () => this.disabled = true)\n            .on(this._event.SAVE, (focusUpdated) => !this.disabled &&  this.submit(focusUpdated))\n            .on(this._event.FOCUS, (name) => this.focus(name))\n            .on(this._event.BLUR, () => {\n                this.$el.removeClass(this.classNames.FOCUSED);\n                this.disable();\n            })\n            .on(this._event.SUBMIT_STARTED, () => this._submitStarted())\n            .on(this._event.SUBMIT_FINISHED, () => this._submitFinished())\n    },\n\n    /**\n     * Renders default cell contents\n     *\n     * @param data\n     */\n    defaultColumnRenderer: function (data) {\n        if (data.allowEdit !== false) {\n            return $(\"<input type='text' />\")\n                .addClass('text')\n                .attr({\n                    name: data.name,\n                    value: data.value\n                });\n        } else if (data.value) {\n            return document.createTextNode(data.value);\n        }\n    },\n\n    /**\n     * Renders drag handle\n     * @return jQuery\n     */\n    renderDragHandle: function () {\n        return '<span class=\"' + this.classNames.DRAG_HANDLE + '\"></span></td>';\n    },\n\n    /**\n     * Executes cancel event if ESC is pressed\n     *\n     * @param {Event} e\n     */\n    _handleKeyUpEvent: function (e) {\n        if (e.keyCode === 27) {\n            this.trigger(this._event.CANCEL);\n        }\n    },\n\n    /**\n     * Fires cancel event\n     *\n     * @param {Event} e\n     *\n     * @return EditRow\n     */\n    _cancel: function (e) {\n        this.trigger(this._event.CANCEL);\n        e.preventDefault();\n        return this;\n    },\n\n    /**\n     * Disables events/fields and adds safe guard against double submitting\n     *\n     * @return EditRow\n     */\n    _submitStarted: function () {\n        this.submitting = true;\n        this.showLoading()\n            .disable()\n            .delegateEvents({});\n\n        return this;\n    },\n\n    /**\n     * Enables events & fields\n     *\n     * @return EditRow\n     */\n    _submitFinished: function () {\n        this.submitting = false;\n        this.hideLoading()\n            .enable()\n            .delegateEvents(this.events);\n\n        return this;\n    },\n\n    /**\n     * Handles dom focus event, by only focusing row if it isn't already\n     *\n     * @param {Event} e\n     *\n     * @return EditRow\n     */\n    _focus: function (e) {\n        if (!this.hasFocus()) {\n            this.trigger(this._event.FOCUS, e.target.name);\n        }\n        return this;\n    },\n\n\n    /**\n     * Returns true if row has focused class\n     *\n     * @return Boolean\n     */\n    hasFocus: function () {\n        return this.$el.hasClass(this.classNames.FOCUSED);\n    },\n\n    /**\n     * Focus specified field (by name or id - first argument), first field with an error or first field (DOM order)\n     *\n     * @param name\n     *\n     * @return EditRow\n     */\n    focus: function (name) {\n        var $focus;\n        var $error;\n\n        this.enable();\n\n        if (name) {\n            $focus = this.$el.find(this.fieldFocusSelector(name));\n        } else {\n\n            $error = this.$el.find(this.classNames.ERROR + ':first');\n\n            if ($error.length === 0) {\n                $focus = this.$el.find(':input:text:first');\n            } else {\n                $focus = $error.parent().find(':input');\n            }\n        }\n\n        this.$el.addClass(this.classNames.FOCUSED);\n        $focus.focus().trigger('select');\n\n        return this;\n    },\n\n    /**\n     * Disables all fields\n     *\n     * @return EditRow\n     */\n    disable: function () {\n        var $replacementSubmit;\n        var $submit;\n\n        // firefox does not allow you to submit a form if there are 2 or more submit buttons in a form, even if all but\n        // one is disabled. It also does not let you change the type=\"submit' to type=\"button\". Therfore he lies the hack.\n        if (isFirefox) {\n            $submit = this.$el.find(':submit');\n\n            if ($submit.length) {\n                $replacementSubmit = $(\"<input type='submit' class='\" + this.classNames.SUBMIT + \"' />\")\n                    .addClass($submit.attr('class'))\n                    .val($submit.val())\n                    .data(this.dataKeys.ENABLED_SUBMIT, $submit);\n\n                $submit.replaceWith($replacementSubmit);\n            }\n        }\n\n        this.$el.addClass(this.classNames.DISABLED)\n            .find(':submit')\n            .attr('disabled', 'disabled');\n\n        return this;\n    },\n\n    /**\n     * Enables all fields\n     *\n     * @return EditRow\n     */\n    enable: function () {\n        var $placeholderSubmit;\n        var $submit;\n\n        // firefox does not allow you to submit a form if there are 2 or more submit buttons in a form, even if all but\n        // one is disabled. It also does not let you change the type=\"submit' to type=\"button\". Therfore he lies the hack.\n        if (isFirefox) {\n            $placeholderSubmit = this.$el.find(this.classNames.SUBMIT);\n            $submit = $placeholderSubmit.data(this.dataKeys.ENABLED_SUBMIT);\n\n            if ($submit && $placeholderSubmit.length) {\n                $placeholderSubmit.replaceWith($submit);\n            }\n        }\n\n        this.$el.removeClass(this.classNames.DISABLED)\n            .find(':submit')\n            .removeAttr('disabled');\n\n        return this;\n    },\n\n    /**\n     * Shows loading indicator\n     *\n     * @return EditRow\n     */\n    showLoading: function () {\n        appendStatusSpinner(this.$el);\n        return this;\n    },\n\n    /**\n     * Hides loading indicator\n     *\n     * @return EditRow\n     */\n    hideLoading: function () {\n        removeStatusSpinner(this.$el);\n        return this;\n    },\n\n    /**\n     * If any of the fields have changed\n     *\n     * @return {Boolean}\n     */\n    hasUpdates: function () {\n        return !!this.mapSubmitParams(this.serializeObject());\n    },\n\n    /**\n     * Serializes the view into model representation.\n     * Default implementation uses simple jQuery plugin to serialize form fields into object\n     *\n     * @return Object\n     */\n    serializeObject: function () {\n        var $el = this.$el;\n        return $el.serializeObject ?\n            $el.serializeObject() :\n            $el.serialize();\n    },\n\n    mapSubmitParams: function (params) {\n        return this.model.changedAttributes(params);\n    },\n\n    /**\n     * Handle submission of new entries and editing of old.\n     *\n     * @param {Boolean} focusUpdated - flag of whether to focus read-only view after succssful submission\n     *\n     * @return EditRow\n     */\n    submit: function (focusUpdated) {\n        var instance = this;\n        var values;\n\n        // IE doesnt like it when the focused element is removed\n        if (document.activeElement !== window) {\n            $(document.activeElement).blur();\n        }\n\n        if (this.isUpdateMode) {\n            values = this.mapSubmitParams(this.serializeObject()); // serialize form fields into JSON\n\n            if (!values) {\n                return instance.trigger(instance._event.CANCEL);\n            }\n        } else {\n            this.model.clear();\n            values = this.mapSubmitParams(this.serializeObject()); // serialize form fields into JSON\n        }\n\n        this.trigger(this._event.SUBMIT_STARTED);\n\n        /* Attempt to add to server model. If fail delegate to createView to render errors etc. Otherwise,\n         add a new model to this._models and render a row to represent it. */\n        this.model.save(values, {\n            success: function () {\n                if (instance.isUpdateMode) {\n                    instance.trigger(instance._event.UPDATED, instance.model, focusUpdated);\n                } else {\n                    instance.trigger(instance._event.CREATED, instance.model.toJSON());\n\n                    instance.model = new instance._modelClass(); // reset\n\n                    instance.render({errors: {}, values: {}}); // pulls in instance's model for create row\n                    instance.trigger(instance._event.FOCUS);\n                }\n\n                instance.trigger(instance._event.SUBMIT_FINISHED);\n            },\n\n            error: function (model, data, xhr) {\n                if (xhr.status === 400) {\n                    instance.renderErrors(data.errors);\n                    instance.trigger(instance._event.VALIDATION_ERROR, data.errors);\n                }\n\n                instance.trigger(instance._event.SUBMIT_FINISHED);\n            },\n\n            silent: true\n        });\n\n        return this;\n    },\n\n    /**\n     * Render an error message\n     *\n     * @param msg\n     *\n     * @return {jQuery}\n     */\n    renderError: function (name, msg) {\n        return $('<div />').attr('data-field', name).addClass(this.classNames.ERROR).text(msg);\n    },\n\n    /**\n     * Render and append error messages. The property name will be matched to the input name to determine which cell to\n     * append the error message to. If this does not meet your needs please extend this method.\n     *\n     * @param errors\n     */\n    renderErrors: function (errors) {\n        var instance = this;\n\n        this.$('.' + this.classNames.ERROR).remove(); // avoid duplicates\n\n        if (errors) {\n            $.each(errors, function (name, msg) {\n                instance.$el.find(\"[name='\" + name + \"']\")\n                    .closest('td')\n                    .append(instance.renderError(name, msg));\n            });\n        }\n\n        return this;\n    },\n\n\n    /**\n     * Handles rendering of row\n     *\n     * @param {Object} renderData\n     * ... {Object} vales - Values of fields\n     */\n    render: function  (renderData) {\n        var instance = this;\n\n        this.$el.empty();\n\n        if (this.allowReorder) {\n            $('<td  class=\"' + this.classNames.ORDER + '\" />').append(this.renderDragHandle()).appendTo(instance.$el);\n        }\n\n        $.each(this.columns, function (i, column) {\n            var contents;\n            var $cell;\n            var value = renderData.values[column.id];\n            var args = [\n                {name: column.id, value: value, allowEdit: column.allowEdit},\n                renderData.values,\n                instance.model\n            ];\n\n            if (value) {\n                instance.$el.attr('data-' + column.id, value); // helper for webdriver testing\n            }\n\n            if (instance.isCreateRow && column.createView) {\n                // TODO AUI-1058 - The row's model should be guaranteed to be in the correct state by this point.\n                contents = new column.createView({\n                    model: instance.model\n                }).render(args[0]);\n\n            } else if (column.editView) {\n                contents = new column.editView({\n                    model: instance.model\n                }).render(args[0]);\n            } else {\n                contents = instance.defaultColumnRenderer.apply(instance, args);\n            }\n\n            $cell = $('<td />');\n\n            if (typeof contents === 'object' && contents.done) {\n                contents.done(function (contents) {\n                    $cell.append(contents);\n                });\n            } else {\n                $cell.append(contents);\n            }\n\n            if (column.styleClass) {\n                $cell.addClass(column.styleClass);\n            }\n\n            $cell.appendTo(instance.$el);\n        });\n\n        this.$el\n            .append(this.renderOperations(renderData.update, renderData.values)) // add submit/cancel buttons\n            .addClass(this.classNames.ROW + ' ' + this.classNames.EDIT_ROW);\n\n        this.trigger(this._event.RENDER, this.$el, renderData.values);\n        this.$el.trigger(this._event.CONTENT_REFRESHED, [this.$el]);\n\n        return this;\n    },\n\n    /**\n     * Gets markup for add/update and cancel buttons\n     *\n     * @param {Boolean} update\n     */\n    renderOperations: function (update) {\n        var $operations = $('<td class=\"aui-restfultable-operations\" />');\n\n        if (update) {\n            $operations.append($('<input class=\"aui-button\" type=\"submit\" />').attr({\n                accesskey: this.submitAccessKey,\n                value: i18n.getText('aui.words.update')\n            }))\n                .append($('<a class=\"aui-button aui-button-link\" href=\"#\" />')\n                    .addClass(this.classNames.CANCEL)\n                    .text(i18n.getText('aui.words.cancel'))\n                    .attr({\n                        accesskey: this.cancelAccessKey\n                    }));\n        } else {\n            $operations.append($('<input class=\"aui-button\" type=\"submit\" />').attr({\n                accesskey: this.submitAccessKey,\n                value: i18n.getText('aui.words.add')\n            }));\n        }\n\n        return $operations.add($(`<td class=\"${this.classNames.STATUS}\" />`));\n    }\n});\n","import $ from '../jquery';\nimport { triggerEvtForInst } from './event-handlers';\nimport { isEmpty, isEqual } from 'underscore';\nimport Backbone from 'backbone';\nimport events from './event-names';\n\n/**\n * A class provided to fill some gaps with the out of the box Backbone.Model class. Most notiably the inability\n * to send ONLY modified attributes back to the server.\n */\nvar EntryModel = Backbone.Model.extend({\n    sync: function (method, model, options) {\n        var instance = this;\n        var oldError = options.error;\n\n        options.error = function (xhr) {\n            instance._serverErrorHandler(xhr, this);\n            if (oldError) {\n                oldError.apply(this, arguments);\n            }\n        };\n\n        return Backbone.sync.apply(Backbone, arguments);\n    },\n\n    /**\n     * Overrides default save handler to only save (send to server) attributes that have changed.\n     * Also provides some default error handling.\n     *\n     * @override\n     * @param attributes\n     * @param options\n     */\n    save: function (attributes, options) {\n        options = options || {};\n\n        var instance = this;\n        var Model;\n        var syncModel;\n        var error = options.error; // we override, so store original\n        var success = options.success;\n\n\n        // override error handler to provide some defaults\n        options.error = function (model, xhr) {\n\n            var data = $.parseJSON(xhr.responseText || xhr.data);\n\n            // call original error handler\n            if (error) {\n                error.call(instance, instance, data, xhr);\n            }\n        };\n\n        // if it is a new model, we don't have to worry about updating only changed attributes because they are all new\n        if (this.isNew()) {\n\n            // call super\n            Backbone.Model.prototype.save.call(this, attributes, options);\n\n        // only go to server if something has changed\n        } else if (attributes) {\n            // create temporary model\n            Model = EntryModel.extend({\n                url: this.url()\n            });\n\n            syncModel = new Model({\n                id: this.id\n            });\n\n            syncModel.save = Backbone.Model.prototype.save;\n\n            options.success = function (model, xhr) {\n\n                // update original model with saved attributes\n                instance.clear().set(model.toJSON());\n\n                // call original success handler\n                if (success) {\n                    success.call(instance, instance, xhr);\n                }\n            };\n\n            // update temporary model with the changed attributes\n            syncModel.save(attributes, options);\n        }\n    },\n\n    /**\n     * Destroys the model on the server. We need to override the default method as it does not support sending of\n     * query paramaters.\n     *\n     * @override\n     * @param {object} [options]\n     * @param {function} options.success - Server success callback\n     * @param {function} options.error - Server error callback\n     * @param {object} options.data\n     *\n     * @return EntryModel\n     */\n    destroy: function (options) {\n        options = options || {};\n\n        var instance = this;\n        var url = this.url();\n\n        $.ajax({\n            url: url,\n            type: 'DELETE',\n            dataType: 'json',\n            data: options.data || {},\n            contentType: 'application/json',\n            success(data) {\n                if (instance.collection){\n                    instance.collection.remove(instance);\n                }\n                if (options.success) {\n                    options.success.call(instance, data);\n                }\n            },\n            error(xhr) {\n                instance._serverErrorHandler(xhr, this);\n                if (options.error) {\n                    options.error.call(instance, xhr);\n                }\n            }\n        });\n\n        return this;\n    },\n\n\n    /**\n     * A more complex lookup for changed attributes then default backbone one.\n     *\n     * @param attributes\n     */\n    changedAttributes: function (attributes) {\n        var changed = {};\n        var current = this.toJSON();\n\n        $.each(attributes, function (name, value) {\n\n            if (!current[name]) {\n                if (typeof value === 'string') {\n                    if ($.trim(value) !== '') {\n                        changed[name] = value;\n                    }\n                } else if ($.isArray(value)) {\n                    if (value.length !== 0) {\n                        changed[name] = value;\n                    }\n                } else {\n                    changed[name] = value;\n                }\n            } else if (current[name] && current[name] !== value) {\n\n                if (typeof value === 'object') {\n                    if (!isEqual(value, current[name])) {\n                        changed[name] = value;\n                    }\n                } else {\n                    changed[name] = value;\n                }\n            }\n        });\n\n        if (!isEmpty(changed)) {\n            this.addExpand(changed);\n            return changed;\n        }\n    },\n\n    /**\n     * Useful point to override if you always want to add an expand to your rest calls.\n     *\n     * @param changed attributes that have already changed\n     */\n    addExpand: function (changed) {}, // eslint-disable-line no-unused-vars\n\n    /**\n     * Throws a server error event unless user input validation error (status 400)\n     *\n     * @param xhr\n     * @param ajaxOptions\n     */\n    _serverErrorHandler: function (xhr, ajaxOptions) {\n        var data;\n        if (xhr.status !== 400) {\n            data = $.parseJSON(xhr.responseText || xhr.data);\n            triggerEvtForInst(events.SERVER_ERROR, this, [data, xhr, ajaxOptions]);\n        }\n    },\n\n    /**\n     * Fetches values, with some generic error handling\n     *\n     * @override\n     * @param options\n     */\n    fetch: function (options) {\n        options = options || {};\n\n        // clear the model, so we do not merge the old with the new\n        this.clear();\n\n        // call super\n        Backbone.Model.prototype.fetch.call(this, options);\n    }\n});\n\nexport default EntryModel;\n","import './styles/aui.pattern.table';\nimport '@atlassian/aui/src/less/aui-experimental-restfultable.less';\nexport { default as RestfulTable } from '@atlassian/aui/src/js/aui/restful-table';\n","export default {\n    // AJS\n    REORDER_SUCCESS: 'RestfulTable.reorderSuccess',\n    ROW_ADDED: 'RestfulTable.rowAdded',\n    ROW_REMOVED: 'RestfulTable.rowRemoved',\n    EDIT_ROW: 'RestfulTable.switchedToEditMode',\n    SERVER_ERROR: 'RestfulTable.serverError',\n\n    // Backbone\n    CREATED: 'created',\n    UPDATED: 'updated',\n    FOCUS: 'focus',\n    BLUR: 'blur',\n    SUBMIT: 'submit',\n    SAVE: 'save',\n    MODAL: 'modal',\n    MODELESS: 'modeless',\n    CANCEL: 'cancel',\n    CONTENT_REFRESHED: 'contentRefreshed',\n    RENDER: 'render',\n    FINISHED_EDITING: 'finishedEditing',\n    VALIDATION_ERROR: 'validationError',\n    SUBMIT_STARTED: 'submitStarted',\n    SUBMIT_FINISHED: 'submitFinished',\n    INITIALIZED: 'initialized',\n    ROW_INITIALIZED: 'rowInitialized',\n    ROW_EDIT: 'editRow'\n};\n","import $ from './jquery';\nimport 'jquery-ui/ui/core';\nimport 'jquery-ui/ui/widget';\nimport 'jquery-ui/ui/widgets/mouse';\nimport 'jquery-ui/ui/widgets/draggable';\nimport 'jquery-ui/ui/widgets/sortable';\nimport * as logger from './internal/log';\nimport Backbone from 'backbone';\nimport classNames from './restful-table/class-names';\nimport CustomCreateView from './restful-table/custom-create-view';\nimport CustomEditView from './restful-table/custom-edit-view';\nimport CustomReadView from './restful-table/custom-read-view';\nimport dataKeys from './restful-table/data-keys';\nimport EditRow from './restful-table/edit-row';\nimport EntryModel from './restful-table/entry-model';\nimport {triggerEvtForInst} from './restful-table/event-handlers';\nimport events from './restful-table/event-names';\nimport globalize from './internal/globalize';\nimport Row from './restful-table/row';\nimport {spinner} from './restful-table/spinner';\nimport i18n from './i18n';\n\n/**\n * A table whose entries/rows can be retrieved, added and updated via REST (CRUD).\n * It uses backbone.js to sync the table's state back to the server, avoiding page refreshes.\n *\n * @class RestfulTable\n */\nvar RestfulTable = Backbone.View.extend({\n    /**\n     * @param {!Object} options\n     * ... {!Object} resources\n     * ... ... {(string|function(function(Array.<Object>)))} all - URL of REST resource OR function that retrieves all entities.\n     * ... ... {string} self - URL of REST resource to sync a single entities state (CRUD).\n     * ... {!(selector|Element|jQuery)} el - Table element or selector of the table element to populate.\n     * ... {!Array.<Object>} columns - Which properties of the entities to render. The id of a column maps to the property of an entity.\n     * ... {Object} views\n     * ... ... {RestfulTable.EditRow} editRow - Backbone view that renders the edit & create row. Your view MUST extend RestfulTable.EditRow.\n     * ... ... {RestfulTable.Row} row - Backbone view that renders the readonly row. Your view MUST extend RestfulTable.Row.\n     * ... {boolean} allowEdit - Is the table editable. If true, clicking row will switch it to edit state. Default true.\n     * ... {boolean} allowDelete - Can entries be removed from the table, default true.\n     * ... {boolean} allowCreate - Can new entries be added to the table, default true.\n     * ... {boolean} allowReorder - Can we drag rows to reorder them, default false.\n     * ... {boolean} autoFocus - Automatically set focus to first field on init, default false.\n     * ... {boolean} reverseOrder - Reverse the order of rows, default false.\n     * ... {boolean} silent - Do not trigger a \"refresh\" event on sort, default false.\n     * ... {String} id - The id for the table. This id will be used to fire events specific to this instance.\n     * ... {string} createPosition - If set to \"bottom\", place the create form at the bottom of the table instead of the top.\n     * ... {string} addPosition - If set to \"bottom\", add new rows at the bottom of the table instead of the top. If undefined, createPosition will be used to define where to add the new row.\n     * ... {string} noEntriesMsg - Text to display under the table header if it is empty, default empty.\n     * ... {string} loadingMsg - Text/HTML to display while loading, default \"Loading\".\n     * ... {string} submitAccessKey - Access key for submitting.\n     * ... {string} cancelAccessKey - Access key for canceling.\n     * ... @property {RestfulTable~deleteConfirmationCallback} deleteConfirmationCallback - function returning Promise determining if row should be deleted or not\n     * ... {function(string): (selector|jQuery|Element)} fieldFocusSelector - Element to focus on given a name.\n     * ... {EntryModel} model - Backbone model representing a row, default EntryModel.\n     * ... {Backbone.Collection} Collection - Backbone collection representing the entire table, default Backbone.Collection.\n     * @callback deleteConfirmationCallback\n     */\n    initialize: function (options) {\n        var instance = this;\n\n        // combine default and user options\n        instance.options = $.extend(true, instance._getDefaultOptions(options), options);\n\n        // Prefix events for this instance with this id.\n        instance.id = this.options.id;\n\n        // faster lookup\n        instance._event = events;\n        instance.classNames = classNames;\n        instance.dataKeys = dataKeys;\n\n        // shortcuts to popular elements\n        this.$table = $(options.el)\n            .addClass(this.classNames.RESTFUL_TABLE)\n            .addClass(this.classNames.ALLOW_HOVER)\n            .addClass('aui');\n\n        this.$table.wrapAll(\"<form class='aui' action='#' />\");\n\n        this.$thead = $('<thead/>');\n        this.$theadRow = $('<tr />').appendTo(this.$thead);\n        this.$tbody = $('<tbody/>');\n\n        if (!this.$table.length) {\n            throw new Error('RestfulTable: Init failed! The table you have specified [' + this.$table.selector + '] cannot be found.');\n        }\n\n        if (!this.options.columns) {\n            throw new Error(\"RestfulTable: Init failed! You haven't provided any columns to render.\");\n        }\n\n        if (this.options.deleteConfirmationCallback && !(this.options.deleteConfirmationCallback instanceof Function)) {\n            throw new Error('RestfulTable: Init failed! deleteConfirmationCallback is not a function');\n        }\n\n        // Let user know the table is loading\n        this.showGlobalLoading();\n        this.options.columns.forEach(function (column) {\n            var header = $.isFunction(column.header) ? column.header() : column.header;\n            if (typeof header === 'undefined') {\n                logger.warn('You have not specified [header] for column [' + column.id + ']. Using id for now...');\n                header = column.id;\n            }\n\n            instance.$theadRow.append('<th>' + header + '</th>');\n        });\n\n        // columns for submit buttons and loading indicator used when editing\n        instance.$theadRow.append('<th></th><th></th>');\n\n        // create a new Backbone collection to represent rows (http://documentcloud.github.com/backbone/#Collection)\n        this._models = this._createCollection();\n\n        // shortcut to the class we use to create rows\n        this._rowClass = this.options.views.row;\n\n        this.editRows = []; // keep track of rows that are being edited concurrently\n\n        this.$table.closest('form').submit(function (e) {\n            if (instance.focusedRow) {\n                // Delegates saving of row. See EditRow.submit\n                instance.focusedRow.trigger(instance._event.SAVE);\n            }\n            e.preventDefault();\n        });\n\n        if (this.options.allowReorder) {\n            // Add allowance for another cell to the <thead>\n            this.$theadRow.prepend('<th />');\n\n            // Allow drag and drop reordering of rows\n            this.$tbody.sortable({\n                handle: '.' + this.classNames.DRAG_HANDLE,\n                helper: function (e, elt) {\n                    var helper = $('<div/>').attr('class', elt.attr('class')).addClass(instance.classNames.MOVEABLE);\n                    elt.children().each(function () {\n                        var $td = $(this);\n\n                        // .offsetWidth/.outerWidth() is broken in webkit for tables, so we do .clientWidth + borders\n                        // Need to coerce the border-left-width to an in because IE - http://bugs.jquery.com/ticket/10855\n                        var borderLeft = parseInt(0 + $td.css('border-left-width'), 10);\n                        var borderRight = parseInt(0 + $td.css('border-right-width'), 10);\n                        var width = $td[0].clientWidth + borderLeft + borderRight;\n\n                        helper.append($('<div/>').html($td.html()).attr('class', $td.attr('class')).width(width));\n                    });\n\n                    helper = $(\"<div class='aui-restfultable-readonly'/>\").append(helper); // Basically just to get the styles.\n                    helper.css({left: elt.offset().left}); // To align with the other table rows, since we've locked scrolling on x.\n                    helper.appendTo(document.body);\n\n                    return helper;\n                },\n                start: function (event, ui) {\n                    var cachedHeight = ui.helper[0].clientHeight;\n                    var $this = ui.placeholder.find('td');\n\n                    // Make sure that when we start dragging widths do not change\n                    ui.item\n                        .addClass(instance.classNames.MOVEABLE)\n                        .children().each(function (i) {\n                            $(this).width($this.eq(i).width());\n                        });\n\n                    // Create a <td> to add to the placeholder <tr> to inherit CSS styles.\n                    var td = '<td colspan=\"' + instance.getColumnCount() + '\">&nbsp;</td>';\n\n                    ui.placeholder.html(td).css({\n                        height: cachedHeight,\n                        visibility: 'visible'\n                    });\n\n                    // Stop hover effects etc from occuring as we move the mouse (while dragging) over other rows\n                    instance.getRowFromElement(ui.item[0]).trigger(instance._event.MODAL);\n                },\n                stop: function (event, ui) {\n                    if ($(ui.item[0]).is(':visible')) {\n                        ui.item\n                            .removeClass(instance.classNames.MOVEABLE)\n                            .children().attr('style', '');\n\n                        ui.placeholder.removeClass(instance.classNames.ROW);\n\n                        // Return table to a normal state\n                        instance.getRowFromElement(ui.item[0]).trigger(instance._event.MODELESS);\n                    }\n                },\n                update: function (event, ui) {\n                    var context = {\n                        row: instance.getRowFromElement(ui.item[0]),\n                        item: ui.item,\n                        nextItem: ui.item.next(),\n                        prevItem: ui.item.prev()\n                    };\n\n                    instance.move(context);\n                },\n                axis: 'y',\n                delay: 0,\n                containment: 'document',\n                cursor: 'move',\n                scroll: true,\n                zIndex: 8000\n            });\n\n            // Prevent text selection while reordering.\n            this.$tbody.on('selectstart mousedown', function (event) {\n                return !$(event.target).is('.' + instance.classNames.DRAG_HANDLE);\n            });\n        }\n\n        if (this.options.allowCreate !== false) {\n\n            // Create row responsible for adding new entries ...\n            this._createRow = new this.options.views.editRow({\n                columns: this.options.columns,\n                isCreateRow: true,\n                model: this.options.model.extend({\n                    url: function () {\n                        return instance.options.resources.self;\n                    }\n                }),\n                cancelAccessKey: this.options.cancelAccessKey,\n                submitAccessKey: this.options.submitAccessKey,\n                allowReorder: this.options.allowReorder,\n                fieldFocusSelector: this.options.fieldFocusSelector\n            });\n            this._createRow.on(this._event.CREATED, function (values) {\n                if ((typeof instance.options.addPosition === 'undefined' && instance.options.createPosition === 'bottom') ||\n                        instance.options.addPosition === 'bottom') {\n                    instance.addRow(values);\n                } else {\n                    instance.addRow(values, 0);\n                }\n            });\n            this._createRow.on(this._event.VALIDATION_ERROR, function () {\n                this.trigger(instance._event.FOCUS);\n            });\n            this._createRow.render({\n                errors: {},\n                values: {}\n            });\n\n            // ... and appends it as the first row\n            this.$create = $('<tbody class=\"' + this.classNames.CREATE + '\" />')\n                .append(this._createRow.el);\n\n            // Manage which row has focus\n            this._applyFocusCoordinator(this._createRow);\n\n            // focus create row\n            this._createRow.trigger(this._event.FOCUS);\n        }\n\n        // when a model is removed from the collection, remove it from the viewport also\n        this._models.on('remove', function (model) {\n            instance.getRows().forEach(function (row) {\n                if (row.model === model) {\n                    if (row.hasFocus() && instance._createRow) {\n                        instance._createRow.trigger(instance._event.FOCUS);\n                    }\n                    instance.removeRow(row);\n                }\n            });\n        });\n\n        this.fetchInitialResources();\n    },\n\n    fetchInitialResources: function () {\n        var instance = this;\n        if ($.isFunction(this.options.resources.all)) {\n            this.options.resources.all(function (entries) {\n                instance.populate(entries);\n            });\n        } else {\n            $.get(this.options.resources.all, function (entries) {\n                instance.populate(entries);\n            });\n        }\n    },\n\n    move: function (context) {\n\n        var instance = this;\n\n        var createRequest = function (afterElement) {\n            if (!afterElement.length) {\n                return {\n                    position: 'First'\n                };\n            } else {\n                var afterModel = instance.getRowFromElement(afterElement).model;\n                return {\n                    after: afterModel.url()\n                };\n            }\n        };\n\n        if (context.row) {\n\n            var data = instance.options.reverseOrder ? createRequest(context.nextItem) : createRequest(context.prevItem);\n\n            $.ajax({\n                url: context.row.model.url() + '/move',\n                type: 'POST',\n                dataType: 'json',\n                contentType: 'application/json',\n                data: JSON.stringify(data),\n                complete: function () {\n                    // hides loading indicator (spinner)\n                    context.row.hideLoading();\n                },\n                success: function (xhr) {\n                    triggerEvtForInst(instance._event.REORDER_SUCCESS, instance, [xhr]);\n                },\n                error: function (xhr) {\n                    var responseData = $.parseJSON(xhr.responseText || xhr.data);\n                    triggerEvtForInst(instance._event.SERVER_ERROR, instance, [responseData, xhr, this]);\n                }\n            });\n\n            // shows loading indicator (spinner)\n            context.row.showLoading();\n        }\n    },\n\n    _createCollection: function () {\n        var instance = this;\n\n        // create a new Backbone collection to represent rows (http://documentcloud.github.com/backbone/#Collection)\n        var RowsAwareCollection = this.options.Collection.extend({\n            // Force the collection to re-sort itself. You don't need to call this under normal\n            // circumstances, as the set will maintain sort order as each item is added.\n            sort: function (options) {\n                options || (options = {});\n                if (!this.comparator) {\n                    throw new Error('Cannot sort a set without a comparator');\n                }\n                this.tableRows = instance.getRows();\n                this.models = this.sortBy(this.comparator, this);\n                this.tableRows = undefined;\n                if (!options.silent) {\n                    this.trigger('refresh', this, options);\n                }\n                return this;\n            },\n            remove: function (...args) {\n                this.tableRows = instance.getRows();\n                Backbone.Collection.prototype.remove.apply(this, args);\n                this.tableRows = undefined;\n                return this;\n            }\n        });\n\n        return new RowsAwareCollection([], {\n            comparator: function (row) {\n                // sort models in collection based on dom ordering\n                var index;\n\n                var currentTableRows = (this && this.tableRows !== undefined) ? this.tableRows : instance.getRows();\n                currentTableRows.some(function (item, i) {\n                    if (item.model.id === row.id) {\n                        index = i;\n                        return true;\n                    }\n                });\n                return index;\n            }\n        });\n    },\n\n    /**\n     * Refreshes table with entries\n     *\n     * @param entries\n     */\n    populate: function (entries) {\n        if (this.options.reverseOrder) {\n            entries.reverse();\n        }\n\n        this.hideGlobalLoading();\n        if (entries && entries.length) {\n            // Empty the models collection\n            this._models.reset([], {silent: true});\n            // Add all the entries to collection and render them\n            this.renderRows(entries);\n            // show message to user if we have no entries\n            if (this.isEmpty()) {\n                this.showNoEntriesMsg();\n            }\n        } else {\n            this.showNoEntriesMsg();\n        }\n\n        // Ok, lets let everyone know that we are done...\n        this.$table\n            .append(this.$thead);\n\n        if (this.options.createPosition === 'bottom') {\n            this.$table.append(this.$tbody)\n                .append(this.$create);\n        } else {\n            this.$table\n                .append(this.$create)\n                .append(this.$tbody);\n        }\n\n        this.$table.trigger(this._event.INITIALIZED, [this]);\n\n        triggerEvtForInst(this._event.INITIALIZED, this, [this]);\n\n        if (this.options.autoFocus) {\n            this.$table.find(':input:text:first').focus(); // set focus to first field\n        }\n    },\n\n    /**\n     * Shows loading indicator and text\n     *\n     * @return {RestfulTable}\n     */\n    showGlobalLoading: function () {\n        if (!this.$loading) {\n            this.$loading =  $('<div class=\"aui-restfultable-init\">' +\n                '<span class=\"aui-restfultable-loading\">' + spinner + this.options.loadingMsg + '</span></div>');\n        }\n\n        if (!this.$loading.is(':visible')) {\n            this.$loading.insertAfter(this.$table);\n        }\n\n        return this;\n    },\n\n    /**\n     * Hides loading indicator and text\n     * @return {RestfulTable}\n     */\n    hideGlobalLoading: function () {\n        if (this.$loading) {\n            this.$loading.remove();\n        }\n        return this;\n    },\n\n\n    /**\n     * Adds row to collection and renders it\n     *\n     * @param {Object} values\n     * @param {number} index\n     * @return {RestfulTable}\n     */\n    addRow: function (values, index) {\n        var view;\n        var model;\n\n        if (!values.id) {\n            throw new Error('RestfulTable.addRow: to add a row values object must contain an id. ' +\n                'Maybe you are not returning it from your restend point?' +\n                'Recieved:' + JSON.stringify(values));\n        }\n\n        model = new this.options.model(values);\n\n\n        view = this._renderRow(model, index);\n\n        this._models.add(model);\n        this.removeNoEntriesMsg();\n\n        // Let everyone know we added a row\n        triggerEvtForInst(this._event.ROW_ADDED, this, [view, this]);\n        return this;\n    },\n\n    /**\n     * Provided a view, removes it from display and backbone collection\n     *\n     * @param row {Row} The row to remove.\n     */\n    removeRow: function (row) {\n        this._models.remove(row.model);\n        row.remove();\n\n        if (this.isEmpty()) {\n            this.showNoEntriesMsg();\n        }\n\n        // Let everyone know we removed a row\n        triggerEvtForInst(this._event.ROW_REMOVED, this, [row, this]);\n    },\n\n    /**\n     * Is there any entries in the table\n     *\n     * @return {Boolean}\n     */\n    isEmpty: function () {\n        return this._models.length === 0;\n    },\n\n    /**\n     * Gets all models\n     *\n     * @return {Backbone.Collection}\n     */\n    getModels: function () {\n        return this._models;\n    },\n\n    /**\n     * Gets table body\n     *\n     * @return {jQuery}\n     */\n    getTable: function () {\n        return this.$table;\n    },\n\n    /**\n     * Gets table body\n     *\n     * @return {jQuery}\n     */\n    getTableBody: function () {\n        return this.$tbody;\n    },\n\n    /**\n     * Gets create Row\n     *\n     * @return {EditRow}\n     */\n    getCreateRow: function () {\n        return this._createRow;\n    },\n\n    /**\n     * Gets the number of table columns, accounting for the number of\n     * additional columns added by RestfulTable itself\n     * (such as the drag handle column, buttons and actions columns)\n     *\n     * @return {Number}\n     */\n    getColumnCount: function () {\n        var staticFieldCount = 2; // accounts for the columns allocated to submit buttons and loading indicator\n        if (this.allowReorder) {\n            ++staticFieldCount;\n        }\n        return this.options.columns.length + staticFieldCount;\n    },\n\n    /**\n     * Get the Row that corresponds to the given <tr> element.\n     *\n     * @param {HTMLElement} tr\n     *\n     * @return {Row}\n     */\n    getRowFromElement: function (tr) {\n        return $(tr).data(this.dataKeys.ROW_VIEW);\n    },\n\n    /**\n     * Shows message {options.noEntriesMsg} to the user if there are no entries\n     *\n     * @return {RestfulTable}\n     */\n    showNoEntriesMsg: function () {\n\n        if (this.$noEntries) {\n            this.$noEntries.remove();\n        }\n\n        this.$noEntries = $('<tr>')\n            .addClass(this.classNames.NO_ENTRIES)\n            .append($('<td>')\n                .attr('colspan', this.getColumnCount())\n                .text(this.options.noEntriesMsg)\n            )\n            .appendTo(this.$tbody);\n\n        return this;\n    },\n\n    /**\n     * Removes message {options.noEntriesMsg} to the user if there ARE entries\n     *\n     * @return {RestfulTable}\n     */\n    removeNoEntriesMsg: function () {\n        if (this.$noEntries && this._models.length > 0) {\n            this.$noEntries.remove();\n        }\n        return this;\n    },\n\n    /**\n     * Gets the Row from their associated <tr> elements\n     *\n     * @return {Array}\n     */\n    getRows: function () {\n        var instance = this;\n        var views = [];\n\n        this.$tbody.find('.' + this.classNames.READ_ONLY).each(function () {\n            var $row = $(this);\n            var view = $row.data(instance.dataKeys.ROW_VIEW);\n\n            if (view) {\n                views.push(view);\n            }\n        });\n\n        return views;\n    },\n\n    /**\n     * Appends entry to end or specified index of table\n     *\n     * @param {EntryModel} model\n     * @param index\n     *\n     * @return {jQuery}\n     */\n    _renderRow: function (model, index) {\n        var instance = this;\n        var $rows = this.$tbody.find('.' + this.classNames.READ_ONLY);\n        var $row;\n        var view;\n\n        view = new this._rowClass({\n            model: model,\n            columns: this.options.columns,\n            allowEdit: this.options.allowEdit,\n            allowDelete: this.options.allowDelete,\n            allowReorder: this.options.allowReorder,\n            deleteConfirmationCallback: this.options.deleteConfirmationCallback\n        });\n\n        this.removeNoEntriesMsg();\n\n        view.on(this._event.ROW_EDIT, function (field) {\n            triggerEvtForInst(this._event.EDIT_ROW, {}, [this, instance]);\n            instance.edit(this, field);\n        });\n\n        $row = view.render().$el;\n\n        if (index !== -1) {\n\n            if (typeof index === 'number' && $rows.length !== 0) {\n                $row.insertBefore($rows[index]);\n            } else {\n                this.$tbody.append($row);\n            }\n        }\n\n        $row.data(this.dataKeys.ROW_VIEW, view);\n\n        // deactivate all rows - used in the cases, such as opening a dropdown where you do not want the table editable\n        // or any interactions\n        view.on(this._event.MODAL, function () {\n            instance.$table.removeClass(instance.classNames.ALLOW_HOVER);\n            instance.$tbody.sortable('disable');\n            instance.getRows().forEach(function (row) {\n                if (!instance.isRowBeingEdited(row)) {\n                    row.delegateEvents({}); // clear all events\n                }\n            });\n        });\n\n        // activate all rows - used in the cases, such as opening a dropdown where you do not want the table editable\n        // or any interactions\n        view.on(this._event.MODELESS, function () {\n            instance.$table.addClass(instance.classNames.ALLOW_HOVER);\n            instance.$tbody.sortable('enable');\n            instance.getRows().forEach(function (row) {\n                if (!instance.isRowBeingEdited(row)) {\n                    row.delegateEvents(); // rebind all events\n                }\n            });\n        });\n\n        // ensure that when this row is focused no other are\n        this._applyFocusCoordinator(view);\n\n        this.trigger(this._event.ROW_INITIALIZED, view);\n\n        return view;\n    },\n\n    /**\n     * Returns if the row is edit mode or note.\n     *\n     * @param {Row} row Read-only row to check if being edited.\n     *\n     * @return {Boolean}\n     */\n    isRowBeingEdited: function (row) {\n\n        var isBeingEdited = false;\n\n        this.editRows.some(function (editRow) {\n            if (editRow.el === row.el) {\n                isBeingEdited = true;\n                return true;\n            }\n        });\n\n        return isBeingEdited;\n    },\n\n    /**\n     * Ensures that when supplied view is focused no others are\n     *\n     * @param {Backbone.View} view\n     * @return {RestfulTable}\n     */\n    _applyFocusCoordinator: function (view) {\n        var instance = this;\n\n        if (!view.hasFocusBound) {\n            view.hasFocusBound = true;\n\n            view.on(this._event.FOCUS, function () {\n                if (instance.focusedRow && instance.focusedRow !== view) {\n                    instance.focusedRow.trigger(instance._event.BLUR);\n                }\n                instance.focusedRow = view;\n                if (view instanceof Row && instance._createRow) {\n                    instance._createRow.enable();\n                }\n            });\n        }\n\n        return this;\n    },\n\n    /**\n     * Remove specified row from collection holding rows being concurrently edited\n     *\n     * @param {EditRow} editView\n     *\n     * @return {RestfulTable}\n     */\n    _removeEditRow: function (editView) {\n        var index = $.inArray(editView, this.editRows);\n        this.editRows.splice(index, 1);\n        return this;\n    },\n\n    /**\n     * Focuses last row still being edited or create row (if it exists)\n     *\n     * @return {RestfulTable}\n     */\n    _shiftFocusAfterEdit: function () {\n\n        if (this.editRows.length > 0) {\n            this.editRows[this.editRows.length - 1].trigger(this._event.FOCUS);\n        } else if (this._createRow) {\n            this._createRow.trigger(this._event.FOCUS);\n        }\n\n        return this;\n    },\n\n    /**\n     * Evaluate if we save row when we blur. We can only do this when there is one row being edited at a time, otherwise\n     * it causes an infinite loop JRADEV-5325\n     *\n     * @return {boolean}\n     */\n    _saveEditRowOnBlur: function () {\n        return this.editRows.length <= 1;\n    },\n\n    /**\n     * Dismisses rows being edited concurrently that have no changes\n     */\n    dismissEditRows: function () {\n        this.editRows.forEach(function (editRow) {\n            if (!editRow.hasUpdates()) {\n                editRow.trigger(this._event.FINISHED_EDITING);\n            }\n        }, this);\n    },\n\n    /**\n     * Converts readonly row to editable view\n     *\n     * @param {Backbone.View} row\n     * @param {String} field - field name to focus\n     * @return {Backbone.View} editRow\n     */\n    edit: function (row, field) {\n        var instance = this;\n        var editRow = new this.options.views.editRow({\n            el: row.el,\n            columns: this.options.columns,\n            isUpdateMode: true,\n            allowReorder: this.options.allowReorder,\n            fieldFocusSelector: this.options.fieldFocusSelector,\n            model: row.model,\n            cancelAccessKey: this.options.cancelAccessKey,\n            submitAccessKey: this.options.submitAccessKey\n        });\n        var values = row.model.toJSON();\n\n        values.update = true;\n        editRow.render({\n            errors: {},\n            update: true,\n            values: values\n        })\n            .on(instance._event.UPDATED, function (model, focusUpdated) {\n                instance._removeEditRow (this);\n                this.off();\n                row.render().delegateEvents(); // render and rebind events\n                row.trigger(instance._event.UPDATED); // trigger blur fade out\n                if (focusUpdated !== false) {\n                    instance._shiftFocusAfterEdit();\n                }\n            })\n            .on(instance._event.VALIDATION_ERROR, function () {\n                this.trigger(instance._event.FOCUS);\n            })\n            .on(instance._event.FINISHED_EDITING, function () {\n                instance._removeEditRow(this);\n                row.render().delegateEvents();\n                this.off();  // avoid any other updating, blurring, finished editing, cancel events being fired\n            })\n            .on(instance._event.CANCEL, function () {\n                instance._removeEditRow(this);\n                this.off();  // avoid any other updating, blurring, finished editing, cancel events being fired\n                row.render().delegateEvents(); // render and re` events\n                instance._shiftFocusAfterEdit();\n            })\n            .on(instance._event.BLUR, function () {\n                instance.dismissEditRows(); // dismiss edit rows that have no changes\n                if (instance._saveEditRowOnBlur()) {\n                    this.trigger(instance._event.SAVE, false);  // save row, which if successful will call the updated event above\n                }\n            });\n\n        // Ensure that if focus is pulled to another row, we blur the edit row\n        this._applyFocusCoordinator(editRow);\n\n        // focus edit row, which has the flow on effect of blurring current focused row\n        editRow.trigger(instance._event.FOCUS, field);\n\n        // disables form fields\n        if (instance._createRow) {\n            instance._createRow.disable();\n        }\n\n        this.editRows.push(editRow);\n\n        return editRow;\n    },\n\n\n    /**\n     * Renders all specified rows\n     *\n     * @param rows {Array<Backbone.Model>} array of objects describing Backbone.Model's to render\n     * @return {RestfulTable}\n     */\n    renderRows: function (rows = []) {\n        var comparator = this._models.comparator;\n        var els = [];\n\n        this._models.comparator = undefined; // disable temporarily, assume rows are sorted\n\n        var models = rows.map((row) => {\n            var model = new this.options.model(row);\n            els.push(this._renderRow(model, -1).el);\n            return model;\n        });\n\n        this._models.add(models, {silent: true});\n        this._models.comparator = comparator;\n        this.removeNoEntriesMsg();\n        this.$tbody.append(els);\n\n        return this;\n    },\n\n    /**\n     * Gets default options\n     *\n     * @param {Object} options\n     */\n    _getDefaultOptions: function (options) {\n        return {\n            model: options.model || EntryModel,\n            allowEdit: true,\n            views: {\n                editRow: EditRow,\n                row: Row\n            },\n            Collection: Backbone.Collection.extend({\n                url: options.resources.self,\n                model: options.model || EntryModel\n            }),\n            allowReorder: false,\n            fieldFocusSelector: function (name) {\n                return ':input[name=' + name + '], #' + name;\n            },\n            loadingMsg: options.loadingMsg || i18n.getText('aui.words.loading')\n        };\n    }\n});\n\nRestfulTable.ClassNames = classNames;\nRestfulTable.CustomCreateView = CustomCreateView;\nRestfulTable.CustomEditView = CustomEditView;\nRestfulTable.CustomReadView = CustomReadView;\nRestfulTable.DataKeys = dataKeys;\nRestfulTable.EditRow = EditRow;\nRestfulTable.EntryModel = EntryModel;\nRestfulTable.Events = events;\nRestfulTable.Row = Row;\n\nglobalize('RestfulTable', RestfulTable);\n\nexport default RestfulTable;\n","import $ from '../jquery';\n\nconst eventRoot = document || {};\nconst $eventTarget = $(eventRoot);\n\n/**\n * Triggers a custom event on the AJS object\n *\n * @param {String} name - name of event\n * @param {Array} args - args for event handler\n */\nfunction triggerEvt (name, args) {\n    $eventTarget.trigger(name, args);\n}\n\n/**\n * Binds handler to the AJS object\n *\n * @param {String} name\n * @param {Function} func\n */\nfunction bindEvt (name, func) {\n    $eventTarget.bind(name, func);\n}\n\n/**\n * Some generic error handling that fires event in multiple contexts\n * - on AJS object\n * - on Instance\n * - on AJS object with prefixed id.\n *\n * @param evt\n * @param inst\n * @param args\n */\nfunction triggerEvtForInst (evt, inst, args) {\n    $(inst).trigger(evt, args);\n    triggerEvt(evt, args);\n    if (inst.id) {\n        triggerEvt(inst.id + '-' + evt, args);\n    }\n}\n\nexport {\n    bindEvt,\n    triggerEvt,\n    triggerEvtForInst\n};\n","import Backbone from 'backbone';\nexport default Backbone.View;\n","import Backbone from 'backbone';\nexport default Backbone.View;\n","/**\n * Serializes form fields within the given element to a JSON object\n *\n * {\n *    fieldName: \"fieldValue\"\n * }\n *\n * @returns {Object}\n */\njQuery.fn.serializeObject = function () {\n\n    var data = {};\n\n    this.find(\":input:not(:button):not(:submit):not(:radio):not('select[multiple]')\").each(function () {\n\n        if (this.name === \"\") {\n            return;\n        }\n\n        if (this.value === null) {\n            this.value = \"\";\n        }\n\n        data[this.name] = this.value.match(/^(tru|fals)e$/i) ?\n                            this.value.toLowerCase() == \"true\" : this.value;\n    });\n\n    this.find(\"input:radio:checked\").each(function(){\n        data[this.name] = this.value;\n    });\n\n    this.find(\"select[multiple]\").each(function(){\n\n        var $select = jQuery(this),\n            val = $select.val();\n\n        if ($select.data(\"aui-ss\")) {\n            if (val) {\n                data[this.name] = val[0];\n            } else {\n                data[this.name] = \"\";\n            }\n        } else {\n\n            if (val !== null) {\n                data[this.name] = val;\n            } else {\n                data[this.name] = [];\n            }\n        }\n    });\n\n    return data;\n};","export default {\n    ENABLED_SUBMIT: 'enabledSubmit',\n    ROW_VIEW: 'RestfulTable_Row_View'\n};\n","import './../spinner';\nimport classNames from './class-names';\n\nexport const spinner = '<aui-spinner size=\"small\"></aui-spinner>';\nconst SPINNER_SELECTOR = 'aui-spinner';\n\n/**\n * Appends spinner to .aui-restfultable-status container if not already present\n *\n * @param $el\n */\nexport function appendStatusSpinner($el) {\n    if ($el.find(SPINNER_SELECTOR).length === 0) {\n        $el.find(`.${classNames.STATUS}`).append(spinner);\n    }\n}\n\n/**\n * Removes spinner from .aui-restfultable-status container\n *\n * @param $el\n */\nexport function removeStatusSpinner($el) {\n    $el.find(`.${classNames.STATUS} ${SPINNER_SELECTOR}`).remove();\n}\n","import Backbone from 'backbone';\nexport default Backbone.View;\n","export default {\n    NO_VALUE: 'aui-restfultable-editable-no-value',\n    NO_ENTRIES: 'aui-restfultable-no-entires',\n    RESTFUL_TABLE: 'aui-restfultable',\n    ROW: 'aui-restfultable-row',\n    READ_ONLY: 'aui-restfultable-readonly',\n    ACTIVE: 'aui-restfultable-active',\n    ALLOW_HOVER: 'aui-restfultable-allowhover',\n    FOCUSED: 'aui-restfultable-focused',\n    MOVEABLE: 'aui-restfultable-movable',\n    DISABLED: 'aui-restfultable-disabled',\n    SUBMIT: 'aui-restfultable-submit',\n    CANCEL: 'aui-restfultable-cancel',\n    EDIT_ROW: 'aui-restfultable-editrow',\n    CREATE: 'aui-restfultable-create',\n    DRAG_HANDLE: 'aui-restfultable-draghandle',\n    ORDER: 'aui-restfultable-order',\n    EDITABLE: 'aui-restfultable-editable',\n    ERROR: 'error',\n    DELETE: 'aui-restfultable-delete',\n    STATUS: 'aui-restfultable-status'\n};\n","import $ from '../jquery';\nimport i18n from '../i18n';\nimport Backbone from 'backbone';\nimport classNames from './class-names';\nimport dataKeys from './data-keys';\nimport events from './event-names';\nimport {appendStatusSpinner, removeStatusSpinner} from './spinner';\n\n/**\n * An abstract class that gives the required behaviour for RestfulTable rows.\n * Extend this class and pass it as the {views.row} property of the options passed to RestfulTable in construction.\n */\nexport default Backbone.View.extend({\n    tagName: 'tr',\n\n    events: {\n        'click .aui-restfultable-editable': 'edit'\n    },\n\n    initialize: function (options) {\n        options = options || {};\n\n        this._event = events;\n        this.classNames = classNames;\n        this.dataKeys = dataKeys;\n        this.columns = options.columns;\n        this.allowEdit = options.allowEdit;\n        this.allowDelete = options.allowDelete;\n\n        if (!this.events['click .aui-restfultable-editable']) {\n            throw new Error('It appears you have overridden the events property. To add events you will need to use' +\n                'a work around. https://github.com/documentcloud/backbone/issues/244');\n        }\n\n        this.index = options.index || 0;\n        this.deleteConfirmationCallback = options.deleteConfirmationCallback;\n        this.allowReorder = options.allowReorder;\n        this.$el = $(this.el);\n\n        this\n            .on(this._event.CANCEL, () => this.disabled = true)\n            .on(this._event.FOCUS, field => this.focus(field))\n            .on(this._event.BLUR, () => this.unfocus())\n            .on(this._event.MODAL, () => this.$el.addClass(this.classNames.ACTIVE))\n            .on(this._event.MODELESS, () => this.$el.removeClass(this.classNames.ACTIVE))\n    },\n\n    /**\n     * Renders drag handle\n     *\n     * @return jQuery\n     */\n    renderDragHandle: function () {\n        return '<span class=\"' + this.classNames.DRAG_HANDLE + '\"></span></td>';\n    },\n\n    /**\n     * Renders default cell contents\n     *\n     * @param data\n     *\n     * @return {undefiend, String}\n     */\n    defaultColumnRenderer: function (data) {\n        if (data.value) {\n            return document.createTextNode(data.value.toString());\n        }\n    },\n\n    /**\n     * Save changed attributes back to server and re-render\n     *\n     * @param attr\n     *\n     * @return {Row}\n     */\n    sync: function (attr) {\n        var instance = this;\n\n        this.model.addExpand(attr);\n        this.showLoading();\n        this.model.save(attr, {\n            success: function () {\n                instance.hideLoading().render();\n                instance.trigger(instance._event.UPDATED);\n            },\n            error: function () {\n                instance.hideLoading();\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Get model from server and re-render\n     *\n     * @return {Row}\n     */\n    refresh: function (success, error) {\n        var instance = this;\n\n        this.showLoading();\n        this.model.fetch({\n            success: function () {\n                instance.hideLoading().render();\n                if (success) {\n                    success.apply(this, arguments);\n                }\n            },\n            error: function () {\n                instance.hideLoading();\n                if (error) {\n                    error.apply(this, arguments);\n                }\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * Returns true if row has focused class\n     *\n     * @return Boolean\n     */\n    hasFocus: function () {\n        return this.$el.hasClass(this.classNames.FOCUSED);\n    },\n\n    /**\n     * Adds focus class (Item has been recently updated)\n     *\n     * @return Row\n     */\n    focus: function () {\n        $(this.el).addClass(this.classNames.FOCUSED);\n        return this;\n    },\n\n    /**\n     * Removes focus class\n     *\n     * @return Row\n     */\n    unfocus: function () {\n        $(this.el).removeClass(this.classNames.FOCUSED);\n        return this;\n    },\n\n    /**\n     * Adds loading class (to show server activity)\n     *\n     * @return Row\n     */\n    showLoading: function () {\n        appendStatusSpinner(this.$el);\n        return this;\n    },\n\n    /**\n     * Hides loading class (to show server activity)\n     *\n     * @return Row\n     */\n    hideLoading: function () {\n        removeStatusSpinner(this.$el);\n        return this;\n    },\n\n    /**\n     * Switches row into edit mode\n     *\n     * @param e\n     */\n    edit: function (e) {\n        var field;\n        if ($(e.target).is('.' + this.classNames.EDITABLE)) {\n            field = $(e.target).attr('data-field-name');\n        } else {\n            field = $(e.target).closest('.' + this.classNames.EDITABLE).attr('data-field-name');\n        }\n        this.trigger(this._event.ROW_EDIT, field);\n        return this;\n    },\n\n    /**\n     * Can be overriden to add custom options.\n     *\n     * @returns {jQuery}\n     */\n    renderOperations: function () {\n        var instance = this;\n        if (this.allowDelete !== false) {\n            return $(\"<a href='#' class='aui-button' />\")\n                .addClass(this.classNames.DELETE)\n                .text(i18n.getText('aui.words.delete'))\n                .on('click', function (e) {\n                    e.preventDefault();\n                    instance.destroy();\n                });\n        }\n    },\n\n    /**\n     * Removes entry from table.\n     *\n     * @returns {undefined}\n     */\n    destroy: function () {\n        if (this.deleteConfirmationCallback) {\n            let promise = this.deleteConfirmationCallback(this.model.toJSON());\n            if (promise && promise.then) {\n                promise.then(\n                    () => this.model.destroy(),\n                    () => {}\n                );\n            } else {\n                throw new Error('deleteConfirmationCallback needs to return a Promise')\n            }\n        } else {\n            this.model.destroy();\n        }\n    },\n\n    /**\n     * Renders a generic edit row. You probably want to override this in a sub class.\n     *\n     * @return Row\n     */\n    render: function  () {\n        var instance = this;\n        var renderData = this.model.toJSON();\n        var $opsCell = $(\"<td class='aui-restfultable-operations' />\").append(this.renderOperations({}, renderData));\n        var $throbberCell = $(`<td class=\"${this.classNames.STATUS}\" />`);\n        // restore state\n        this.$el\n            .removeClass(this.classNames.DISABLED + ' ' + this.classNames.FOCUSED + ' ' + this.classNames.EDIT_ROW)\n            .addClass(this.classNames.READ_ONLY)\n            .empty();\n\n\n        if (this.allowReorder) {\n            $('<td  class=\"' + this.classNames.ORDER + '\" />').append(this.renderDragHandle()).appendTo(instance.$el);\n        }\n\n        this.$el.attr('data-id', this.model.id); // helper for webdriver testing\n\n        $.each(this.columns, function (i, column) {\n            var contents;\n            var $cell = $('<td />');\n            var value = renderData[column.id];\n            var fieldName = column.fieldName || column.id;\n            var args = [{name: fieldName, value: value, allowEdit: column.allowEdit}, renderData, instance.model];\n\n            if (value) {\n                instance.$el.attr('data-' + column.id, value); // helper for webdriver testing\n            }\n\n            if (column.readView) {\n                contents = new column.readView({\n                    model: instance.model\n                }).render(args[0]);\n            } else {\n                contents = instance.defaultColumnRenderer.apply(instance, args);\n            }\n\n            if (instance.allowEdit !== false && column.allowEdit !== false) {\n                var $editableRegion = $('<span />')\n                    .addClass(instance.classNames.EDITABLE)\n                    .append('<span class=\"aui-icon aui-icon-small aui-iconfont-edit\"></span>')\n                    .append(contents)\n                    .attr('data-field-name', fieldName);\n\n                $cell = $('<td />').append($editableRegion).appendTo(instance.$el);\n\n                if (!contents || !$.trim(contents)) {\n                    $cell.addClass(instance.classNames.NO_VALUE);\n                    $editableRegion.html($('<em />').text(this.emptyText || i18n.getText('aui.enter.value')));\n                }\n\n            } else {\n                $cell.append(contents);\n            }\n\n            if (column.styleClass) {\n                $cell.addClass(column.styleClass);\n            }\n\n            $cell.appendTo(instance.$el);\n        });\n\n        this.$el\n            .append($opsCell)\n            .append($throbberCell)\n            .addClass(this.classNames.ROW + ' ' + this.classNames.READ_ONLY);\n\n        this.trigger(this._event.RENDER, this.$el, renderData);\n        this.$el.trigger(this._event.CONTENT_REFRESHED, [this.$el]);\n\n        return this;\n    }\n});\n"],"sourceRoot":""}