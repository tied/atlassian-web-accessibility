{"version":3,"sources":["webpack:////buildeng/bamboo-agent-home/xml-data/build-dir/AUI-RELNEXT19-JOB1/aui/node_modules/backbone/backbone.js"],"names":["global","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","root","self","__webpack_require__","exports","undefined","_","$","Backbone","previousBackbone","slice","Array","prototype","VERSION","noConflict","this","emulateHTTP","emulateJSON","addUnderscoreMethods","Class","methods","attribute","each","length","method","value","iteratee","context","cb","defaultVal","args","call","arguments","unshift","apply","addMethod","instance","isFunction","isObject","_isModel","modelMatcher","isString","model","get","attrs","matcher","matches","attributes","Events","eventSplitter","eventsApi","events","name","callback","opts","names","i","keys","test","split","on","internalOn","obj","listening","_events","onApi","ctx","listeners","_listeners","id","listenTo","_listenId","uniqueId","listeningTo","_listeningTo","thisId","objId","count","options","handlers","push","off","offApi","stopListening","ids","remaining","j","handler","_callback","once","onceMap","bind","listenToOnce","map","offer","trigger","Math","max","triggerApi","objEvents","allEvents","all","triggerEvents","concat","ev","l","a1","a2","a3","unbind","extend","Model","cid","cidPrefix","collection","parse","defaults","result","set","changed","initialize","validationError","idAttribute","toJSON","clone","sync","attr","escape","has","key","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","isEqual","_pending","clear","hasChanged","isEmpty","changedAttributes","diff","old","size","previous","previousAttributes","fetch","success","resp","serverAttrs","wrapError","save","wait","validate","isNew","patch","xhr","destroy","defer","url","base","urlError","replace","encodeURIComponent","constructor","isValid","error","values","pairs","invert","pick","omit","chain","Collection","models","comparator","_reset","reset","setOptions","add","remove","merge","addOptions","splice","array","insert","at","min","tail","singular","isArray","removed","_removeModels","added","merged","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","existing","_prepareModel","_addReference","orderChanged","some","m","index","_removeReference","previousModels","pop","shift","_byId","modelId","where","first","findWhere","Error","sortBy","pluck","create","callbackOpts","indexOf","_onModelEvent","event","prevId","forEach","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","any","include","includes","contains","invoke","toArray","head","take","initial","rest","drop","last","without","difference","shuffle","lastIndexOf","sample","partition","groupBy","countBy","indexBy","findIndex","findLastIndex","View","viewOptions","_ensureElement","delegateEventSplitter","tagName","selector","$el","render","_removeElement","setElement","element","undelegateEvents","_setElement","delegateEvents","el","match","delegate","eventName","listener","undelegate","_createElement","document","createElement","className","_setAttributes","type","methodMap","params","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","textStatus","errorThrown","ajax","update","delete","read","Router","routes","_bindRoutes","optionalParam","namedParam","splatParam","escapeRegExp","route","isRegExp","_routeToRegExp","router","history","fragment","_extractParameters","execute","navigate","optional","RegExp","exec","param","decodeURIComponent","History","checkUrl","window","location","routeStripper","rootStripper","pathStripper","started","interval","atRoot","path","pathname","getSearch","matchRoot","decodeFragment","rootPath","decodeURI","href","getHash","getPath","charAt","getFragment","_usePushState","_wantsHashChange","start","hashChange","_hasHashChange","documentMode","_useHashChange","_wantsPushState","pushState","_hasPushState","iframe","src","style","display","tabIndex","body","iWindow","insertBefore","firstChild","contentWindow","open","close","hash","addEventListener","attachEvent","_checkUrlInterval","setInterval","loadUrl","stop","removeEventListener","detachEvent","removeChild","clearInterval","e","title","assign","_updateHash","protoProps","staticProps","child","parent","__super__","module"],"mappings":"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","file":"aui.chunk.261633d7d4dae084628f--d03c4d2123cc5cd522ba.js","sourcesContent":["//     Backbone.js 1.3.3\n\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore'), $;\n    try { $ = require('jquery'); } catch (e) {}\n    factory(root, exports, _, $);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n})(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = Array.prototype.slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.3.3';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], cb(iteratee, this), context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n  var cb = function(iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n    return iteratee;\n  };\n  var modelMatcher = function(attrs) {\n    var matcher = _.matches(attrs);\n    return function(model) {\n      return matcher(model.attributes);\n    };\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n  var eventsApi = function(iteratee, events, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n    return events;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // Guard the `listening` argument from the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n      context: context,\n      ctx: obj,\n      listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n  Events.listenTo = function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off = function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening = function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n  Events.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce = function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger = function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    var defaults = _.result(this, 'defaults');\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Update the `id`.\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend({}, options, {validate: true}));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1};\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Splices `insert` into `array` at index `at`.\n  var splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  };\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed.length) {\n        options.changes = {added: [], merged: [], removed: removed};\n        this.trigger('update', this, options);\n      }\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      if (models == null) return;\n\n      options = _.extend({}, setOptions, options);\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      var model, i;\n      for (i = 0; i < models.length; i++) {\n        model = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        var existing = this.get(model);\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      }\n\n      // Remove stale models.\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] ||\n        this._byId[this.modelId(obj.attributes || obj)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n      return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n      // Run sort based on type of `comparator`.\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return this.map(attr + '');\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be set as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    this.checkUrl = _.bind(this.checkUrl, this);\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function(eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function(eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var rootPath = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n      var url = rootPath + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child;\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n"],"sourceRoot":""}