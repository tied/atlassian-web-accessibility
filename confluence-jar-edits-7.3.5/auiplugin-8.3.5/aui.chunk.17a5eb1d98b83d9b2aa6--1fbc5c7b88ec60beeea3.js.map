{"version":3,"sources":["webpack:///../src/js/aui/internal/deprecation.js"],"names":["__webpack_require__","has","Object","prototype","hasOwnProperty","deprecationCalls","logger","console","warn","Function","apply","call","arguments","getShowDeprecationMessage","displayName","options","called","printFrameOffset","deprecatedLocation","err","Error","stack","stacktrace","stackMessage","replace","split","getDeprecatedLocation","indexOf","push","message","deprecationType","str","charAt","toUpperCase","substring","toSentenceCase","sinceVersion","removeInVersion","alternativeName","extraInfo","extraObject","logCssDeprecation","selectorMap","newNode","$","extend","selector","deprecateFunctionExpression","fn","showDeprecationMessage","name","this","deprecateConstructor","constructorFn","deprecatedConstructor","supportsProperties","defineProperty","get","set","exports","propertyDeprecationSupported","e","deprecateObjectProperty","obj","prop","displayNameOrShowMessageFn","oldVal","val","deprecateValueProperty","deprecateAllProperties","objDisplayPrefix","attr","alternativeNamePrefix","handleAddingSelector","matches","document","querySelectorAll","i","length","deprecatedSelectorMap","observer","MutationObserver","mutations","forEach","mutation","addedNodes","nodeType","testAndHandleDeprecation","observe","childList","subtree","observeFutureChange","deprecateCSS","selectors","el","msMatchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","matchesSelector","_globalize2","default","construct","css","getMessageLogger"],"mappings":"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","file":"aui.chunk.17a5eb1d98b83d9b2aa6--1fbc5c7b88ec60beeea3.js","sourcesContent":["import $ from '../jquery';\nimport globalize from './globalize';\n\nvar has = Object.prototype.hasOwnProperty;\nvar deprecationCalls = [];\n\nfunction toSentenceCase (str) {\n    str += '';\n\n    if (!str) {\n        return '';\n    }\n\n    return str.charAt(0).toUpperCase() + str.substring(1);\n}\n\nfunction getDeprecatedLocation (printFrameOffset) {\n    var err = new Error();\n    var stack = err.stack || err.stacktrace;\n    var stackMessage = (stack && stack.replace(/^Error\\n/, '')) || '';\n\n    if (stackMessage) {\n        stackMessage = stackMessage.split('\\n');\n        return stackMessage[printFrameOffset + 2];\n    }\n    return stackMessage;\n}\n\nfunction logger () {\n    if (typeof console !== 'undefined' && console.warn) {\n        Function.prototype.apply.call(console.warn, console, arguments);\n    }\n}\n\n/**\n * @typedef {Object} DeprecationOptions\n * @property {string} sinceVersion the version this has been deprecated since\n * @property {string} removeInVersion the version this will be removed in\n * @property {string} [alternativeName] the name of an alternative to use\n * @property {string} [extraInfo] extra information to be printed at the end of the deprecation log\n * @property {string} [extraObject] an extra object that will be printed at the end\n * @property {string} [displayName] a human-readable name to show in the deprecation message. If not provided, it is inferred from the function or object being deprecated.\n * @property {string} [deprecationType] type of the deprecation to append to the start of the deprecation message. e.g. JS or CSS\n */\n\n/**\n * Return a function that logs a deprecation warning to the console the first time it is called from a certain location.\n * It will also print the stack frame of the calling function.\n *\n * @param {string} displayName the name of the thing being deprecated\n * @param {DeprecationOptions} options\n * @return {Function} that logs the warning and stack frame of the calling function. Takes in an optional parameter for the offset of\n * the stack frame to print, the default is 0. For example, 0 will log it for the line of the calling function,\n * -1 will print the location the logger was called from\n */\nfunction getShowDeprecationMessage (displayName, options) {\n    // This can be used internally to pas in a showmessage fn\n    if (typeof displayName === 'function') {\n        return displayName;\n    }\n\n    var called = false;\n    options = options || {};\n\n    return function (printFrameOffset) {\n        var deprecatedLocation = getDeprecatedLocation(printFrameOffset ? printFrameOffset : 1) || '';\n        // Only log once if the stack frame doesn't exist to avoid spamming the console/test output\n        if (!called || deprecationCalls.indexOf(deprecatedLocation) === -1) {\n            deprecationCalls.push(deprecatedLocation);\n\n            called = true;\n\n            var deprecationType = (options.deprecationType + ' ') || '';\n\n            var message = 'DEPRECATED ' + deprecationType + '- ' + toSentenceCase(displayName) +\n            ' has been deprecated' + (options.sinceVersion ? ' since ' + options.sinceVersion : '') +\n            ' and will be removed in ' + (options.removeInVersion || 'a future release') + '.';\n\n            if (options.alternativeName) {\n                message += ' Use ' + options.alternativeName + ' instead. ';\n            }\n\n            if (options.extraInfo) {\n                message += ' ' + options.extraInfo;\n            }\n\n            if (deprecatedLocation === '') {\n                deprecatedLocation = ' \\n ' + 'No stack trace of the deprecated usage is available in your current browser.';\n            } else {\n                deprecatedLocation = ' \\n ' + deprecatedLocation;\n            }\n\n            if (options.extraObject) {\n                message += '\\n';\n                logger(message, options.extraObject, deprecatedLocation);\n            } else {\n                logger(message, deprecatedLocation);\n            }\n        }\n    };\n}\n\nfunction logCssDeprecation (selectorMap, newNode) {\n    var displayName = selectorMap.options.displayName;\n    displayName = displayName ? ' (' + displayName + ')' : '';\n\n    var options = $.extend({\n        deprecationType: 'CSS',\n        extraObject: newNode\n    }, selectorMap.options);\n\n    getShowDeprecationMessage('\\'' + selectorMap.selector + '\\' pattern' + displayName, options)();\n}\n\n/**\n * Returns a wrapped version of the function that logs a deprecation warning when the function is used.\n * @param {Function} fn the fn to wrap\n * @param {string} displayName the name of the fn to be displayed in the message\n * @param {DeprecationOptions} options\n * @return {Function} wrapping the original function\n */\nfunction deprecateFunctionExpression(fn, displayName, options) {\n    options = options || {};\n    options.deprecationType = options.deprecationType || 'JS';\n\n    var showDeprecationMessage = getShowDeprecationMessage(displayName || fn.name || 'this function', options);\n    return function () {\n        showDeprecationMessage();\n        return fn.apply(this, arguments);\n    };\n}\n\n/**\n * Returns a wrapped version of the constructor that logs a deprecation warning when the constructor is instantiated.\n * @param {Function} constructorFn the constructor function to wrap\n * @param {string} displayName the name of the fn to be displayed in the message\n * @param {DeprecationOptions} options\n * @return {Function} wrapping the original function\n */\nfunction deprecateConstructor(constructorFn, displayName, options) {\n    options = options || {};\n    options.deprecationType = options.deprecationType || 'JS';\n\n    var deprecatedConstructor = deprecateFunctionExpression(constructorFn, displayName, options);\n    deprecatedConstructor.prototype = constructorFn.prototype;\n    $.extend(deprecatedConstructor, constructorFn); //copy static methods across;\n\n    return deprecatedConstructor;\n}\n\n\nvar supportsProperties = false;\ntry {\n    if (Object.defineProperty) {\n        Object.defineProperty({}, 'blam', {get: function () {}, set: function () {}});\n        supportsProperties = true;\n    }\n} catch (e) {\n    /* IE8 doesn't support on non-DOM elements */\n}\n\n/**\n* Wraps a \"value\" object property in a deprecation warning in browsers supporting Object.defineProperty\n* @param {Object} obj the object containing the property\n* @param {string} prop the name of the property to deprecate\n* @param {DeprecationOptions} options\n*/\nfunction deprecateValueProperty(obj, prop, options) {\n    if (supportsProperties) {\n        var oldVal = obj[prop];\n        options = options || {};\n        options.deprecationType = options.deprecationType || 'JS';\n\n        var displayNameOrShowMessageFn = options.displayName || prop;\n        var showDeprecationMessage = getShowDeprecationMessage(displayNameOrShowMessageFn, options);\n        Object.defineProperty(obj, prop, {\n            get: function () {\n                showDeprecationMessage();\n                return oldVal;\n            },\n            set: function (val) {\n                oldVal = val;\n                showDeprecationMessage();\n                return val;\n            }\n        });\n    }\n}\n\n/**\n * Wraps an object property in a deprecation warning, if possible. functions will always log warnings, but other\n * types of properties will only log in browsers supporting Object.defineProperty\n * @param {Object} obj the object containing the property\n * @param {string} prop the name of the property to deprecate\n * @param {DeprecationOptions} options\n */\nfunction deprecateObjectProperty(obj, prop, options) {\n    if (typeof obj[prop] === 'function') {\n        options = options || {};\n        options.deprecationType = options.deprecationType || 'JS';\n\n        var displayNameOrShowMessageFn = options.displayName || prop;\n        obj[prop] = deprecateFunctionExpression(obj[prop], displayNameOrShowMessageFn, options);\n    } else {\n        deprecateValueProperty(obj, prop, options);\n    }\n}\n\n/**\n * Wraps all an objects properties in a deprecation warning, if possible. functions will always log warnings, but other\n * types of properties will only log in browsers supporting Object.defineProperty\n * @param {Object} obj the object to be wrapped\n * @param {string} objDisplayPrefix the object's prefix to be used in logs\n * @param {DeprecationOptions} options\n * @param {string} options.alternativeNamePrefix a prefix for the alternative property name. Used to generate alternativeName per property.\n */\nfunction deprecateAllProperties(obj, objDisplayPrefix, options) {\n    options = options || {};\n    for (var attr in obj) {\n        if (has.call(obj, attr)) {\n            options.deprecationType = options.deprecationType || 'JS';\n            options.displayName = objDisplayPrefix + attr;\n            options.alternativeName = options.alternativeNamePrefix && (options.alternativeNamePrefix + attr);\n            deprecateObjectProperty(obj, attr, $.extend({}, options));\n        }\n    }\n}\n\nfunction matchesSelector(el, selector) {\n    return (el.matches || el.msMatchesSelector || el.webkitMatchesSelector || el.mozMatchesSelector || el.oMatchesSelector).call(el, selector);\n}\n\nfunction handleAddingSelector(options) {\n    return function (selector) {\n        var selectorMap = {\n            selector: selector,\n            options: options || {}\n        };\n\n        // Search if matches have already been added\n        var matches = document.querySelectorAll(selector);\n        for (var i = 0; i < matches.length; i++) {\n            logCssDeprecation(selectorMap, matches[i]);\n        }\n\n        observeFutureChange(selectorMap);\n    };\n}\n\n/**\n * Return a function that logs a deprecation warning to the console the first time it is called from a certain location.\n * It will also print the stack frame of the calling function.\n *\n * @param {string|Array} selectors a selector or list of selectors that match deprecated markup\n * @param {DeprecationOptions} options\n */\nfunction deprecateCSS(selectors, options) {\n    if (typeof selectors === 'string') {\n        selectors = [selectors];\n    }\n\n    selectors.forEach(handleAddingSelector(options));\n}\n\nfunction testAndHandleDeprecation(newNode) {\n    return function (selectorMap) {\n        if (matchesSelector(newNode, selectorMap.selector)) {\n            logCssDeprecation(selectorMap, newNode);\n        }\n    };\n}\n\nconst deprecatedSelectorMap = [];\nlet observer;\n\nfunction observeFutureChange(selectorMap) {\n    deprecatedSelectorMap.push(selectorMap);\n\n    // Lazily instantiate a mutation observer because they're expensive.\n    if (!observer) {\n        observer = new MutationObserver(function (mutations) {\n            mutations.forEach(function (mutation) {\n                // TODO - should this also look at class changes, if possible?\n                var addedNodes = mutation.addedNodes;\n\n                for (var i = 0; i < addedNodes.length; i++) {\n                    var newNode = addedNodes[i];\n                    if (newNode.nodeType === 1) {\n                        deprecatedSelectorMap.forEach(testAndHandleDeprecation(newNode));\n                    }\n                }\n            });\n        });\n\n        var config = {\n            childList: true,\n            subtree: true\n        };\n\n        observer.observe(document, config);\n    }\n}\n\nglobalize('deprecate', {\n    fn: deprecateFunctionExpression,\n    construct: deprecateConstructor,\n    css: deprecateCSS,\n    prop: deprecateObjectProperty,\n    obj: deprecateAllProperties,\n    propertyDeprecationSupported: supportsProperties,\n    getMessageLogger: getShowDeprecationMessage\n});\n\nexport {\n    deprecateFunctionExpression as fn,\n    deprecateConstructor as construct,\n    deprecateCSS as css,\n    deprecateObjectProperty as prop,\n    deprecateAllProperties as obj,\n    supportsProperties as propertyDeprecationSupported,\n    getShowDeprecationMessage as getMessageLogger\n};\n"],"sourceRoot":""}