{"version":3,"sources":["webpack:///../src/js/aui/to-init.js","webpack:///../src/js/aui/params.js","webpack:///../src/js/aui/populate-parameters.js","webpack:///../src/js/aui/setup.js","webpack:///./aui.side-effects.js"],"names":["__webpack_require__","logger","toInit","func","$","when","ready","then","setTimeout","call","this","ex","error","message","stack","default","_globalize2","populateParameters","parameters","params","_jquery2","each","value","id","title","hasClass","push","match","toLowerCase","$body","data","attr","version","_populateParameters2","ajaxSettings","traditional","Object","keys","_aui","forEach","key","defineProperty","exports","enumerable","get","_auiBehaviour"],"mappings":"2JAAA,QAAAA,EAAA,SACYC,0JAAZD,EAAA,4DAaA,SAASE,EAAQC,GAab,OAZAC,UAAEC,KAAKD,UAAEE,OAAOC,KAAK,WAGjBC,WAAW,WACP,IACIL,EAAKM,KAAKC,KAAMN,WAClB,MAAOO,GACLV,EAAOW,MAAM,gCAAkCD,EAAGE,QAASV,EAAMQ,EAAIA,EAAGG,SAE7E,KAGAJ,MAGX,IA5BAV,EAAA,SA4BAe,SAAU,SAAUb,aAELA,4GChCf,wDAAAF,EAAA,oBACe,EAAAgB,EAAAD,SAAU,qHCDzB,QAAAf,EAAA,aACAA,EAAA,aACAA,EAAA,4DAEA,SAASiB,EAAoBC,GACpBA,IACDA,EAAaC,YAGjB,EAAAC,EAAAL,SAAE,qBAAqBM,KAAK,WACxB,IAAIC,EAAQZ,KAAKY,MACbC,EAAKb,KAAKc,OAASd,KAAKa,IAExB,EAAAH,EAAAL,SAAEL,MAAMe,SAAS,QACbP,EAAWK,GACXL,EAAWK,GAAIG,KAAKJ,GAEpBJ,EAAWK,IAAOD,GAGtBJ,EAAWK,GAAOD,EAAMK,MAAM,kBAA4C,SAAxBL,EAAMM,cAA2BN,KAK/F,EAAAN,EAAAD,SAAU,qBAAsBE,aAEjBA,0GC1Bf,QAAAjB,EAAA,aACAA,EAAA,aACAA,EAAA,aACAA,EAAA,6DAGA,EAAAoB,EAAAL,SAAE,WACE,IAAIc,GAAQ,EAAAT,EAAAL,SAAE,QAETc,EAAMC,KAAK,eACZD,EAAME,KAAK,mBAAoBC,YAGnC,EAAAC,EAAAlB,aAKJX,UAAE8B,aAAaC,aAAc,GAC7B,EAAAnB,EAAAD,SAAU,IAAKX,qBACAA,sJCFfgC,OAAAC,KAAAC,GAAAC,QAAA,SAAAC,GAAA,YAAAA,GAAA,eAAAA,GAAAJ,OAAAK,eAAAC,EAAAF,GAAAG,YAAA,EAAAC,IAAA,kBAAAN,EAAAE,wBAEAJ,OAAAC,KAAAQ,GAAAN,QAAA,SAAAC,GAAA,YAAAA,GAAA,eAAAA,GAAAJ,OAAAK,eAAAC,EAAAF,GAAAG,YAAA,EAAAC,IAAA,kBAAAC,EAAAL,8FACQzB,yJACAA,WAhBRf,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA","file":"aui.chunk.a8f44844d33c3398dce1--219db96b99bd1d106253.js","sourcesContent":["import $ from './jquery';\nimport * as logger from './internal/log';\nimport globalize from './internal/globalize';\n\n/**\n * Adds functions to the list of methods to be run asynchronously after DomContentLoaded.\n *\n * Wraps error handling around the provided function so its failure won't prevent\n * other init functions running.\n *\n * @param {Function} func Function to be called on initialisation.\n *\n * @return {Object}\n */\nfunction toInit (func) {\n    $.when($.ready).then(function () {\n        // Ensure that every function passed through toInit happens asynchronously after DomContentLoaded events,\n        // and will be executed in its own stack, meaning that the UI can be updated in-between expensive handlers.\n        setTimeout(function () {\n            try {\n                func.call(this, $);\n            } catch (ex) {\n                logger.error('Failed to run init function: ' + ex.message, func, ex, ex.stack);\n            }\n        }, 1);\n    });\n\n    return this;\n}\n\nglobalize('toInit', toInit);\n\nexport default toInit;\n","import globalize from './internal/globalize';\nexport default globalize('params', {});\n","import $ from './jquery';\nimport globalize from './internal/globalize';\nimport params from './params';\n\nfunction populateParameters (parameters) {\n    if (!parameters) {\n        parameters = params;\n    }\n\n    $('.parameters input').each(function () {\n        var value = this.value;\n        var id = this.title || this.id;\n\n        if ($(this).hasClass('list')) {\n            if (parameters[id]) {\n                parameters[id].push(value);\n            } else {\n                parameters[id] = [value];\n            }\n        } else {\n            parameters[id] = (value.match(/^(tru|fals)e$/i) ? value.toLowerCase() === 'true' : value);\n        }\n    });\n}\n\nglobalize('populateParameters', populateParameters);\n\nexport default populateParameters;\n","// Global setup that used to be in the main AJS namespace file.\nimport $ from './jquery';\nimport globalize from './internal/globalize';\nimport populateParameters from './populate-parameters';\nimport version from './version';\n\n// Set the version.\n$(function () {\n    var $body = $('body');\n\n    if (!$body.data('auiVersion')) {\n        $body.attr('data-aui-version', version);\n    }\n\n    populateParameters();\n});\n\n// Setting Traditional to handle our default param serialisation.\n// See http://api.jquery.com/jQuery.param/ for more information.\n$.ajaxSettings.traditional = true;\nglobalize('$', $);\nexport default $;\n","/**\n * @fileOverview\n * This imports everything that should be available and executed\n * if a consumer requests the \"core\" of AUI (i.e., the \"ajs\" web-resource).\n * It should be kept as lean as possible!\n * Only import things that are used across 90% of pages.\n */\nimport './styles/aui.page.reset';\nimport './styles/aui.page.typography';\nimport './styles/aui.page.iconography';\nimport './styles/aui.page.links';\nimport './styles/aui.pattern.basic';\nimport './styles/aui.pattern.page-layout';\nimport './styles/aui.pattern.page-header';\nimport './styles/aui.pattern.group';\nimport './styles/aui.pattern.avatar';\nimport './styles/aui.pattern.button';\nimport './styles/aui.pattern.forms';\nimport './styles/aui.pattern.toolbar2';\nexport * from './aui.core';\n// todo AUI-4814: undo the weird relationships between layer, layerManager, and LayerManager.global\nexport * from './behaviours/aui.behaviour.layer-manager'; // because this is created in layer.js, and is needed as a side-effect on most pages :(\nexport {default as $} from '@atlassian/aui/src/js/aui/setup';\nexport {default as toInit} from '@atlassian/aui/src/js/aui/to-init';\n"],"sourceRoot":""}